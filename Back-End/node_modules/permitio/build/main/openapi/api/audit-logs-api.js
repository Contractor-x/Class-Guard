"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuditLogsApi = exports.AuditLogsApiFactory = exports.AuditLogsApiFp = exports.AuditLogsApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * AuditLogsApi - axios parameter creator
 * @export
 */
exports.AuditLogsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary List Audit Logs
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} [pdpId] Filter by pdp config id
         * @param {Array<string>} [users] List of user keys or emails to filter by
         * @param {boolean} [decision] Filter by decision result
         * @param {Array<string>} [resources] Filter by resources
         * @param {string} [tenant] Filter by tenant
         * @param {string} [action] Filter by action
         * @param {number} [timestampFrom] Filter by timestamp from
         * @param {number} [timestampTo] Filter by timestamp to
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuditLogs: async (projId, envId, pdpId, users, decision, resources, tenant, action, timestampFrom, timestampTo, page, perPage, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            common_1.assertParamExists('listAuditLogs', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            common_1.assertParamExists('listAuditLogs', 'envId', envId);
            const localVarPath = `/v2/pdps/{proj_id}/{env_id}/audit_logs`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (pdpId !== undefined) {
                localVarQueryParameter['pdp_id'] = pdpId;
            }
            if (users) {
                localVarQueryParameter['users'] = users;
            }
            if (decision !== undefined) {
                localVarQueryParameter['decision'] = decision;
            }
            if (resources) {
                localVarQueryParameter['resources'] = resources;
            }
            if (tenant !== undefined) {
                localVarQueryParameter['tenant'] = tenant;
            }
            if (action !== undefined) {
                localVarQueryParameter['action'] = action;
            }
            if (timestampFrom !== undefined) {
                localVarQueryParameter['timestamp_from'] = timestampFrom;
            }
            if (timestampTo !== undefined) {
                localVarQueryParameter['timestamp_to'] = timestampTo;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * AuditLogsApi - functional programming interface
 * @export
 */
exports.AuditLogsApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.AuditLogsApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary List Audit Logs
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} [pdpId] Filter by pdp config id
         * @param {Array<string>} [users] List of user keys or emails to filter by
         * @param {boolean} [decision] Filter by decision result
         * @param {Array<string>} [resources] Filter by resources
         * @param {string} [tenant] Filter by tenant
         * @param {string} [action] Filter by action
         * @param {number} [timestampFrom] Filter by timestamp from
         * @param {number} [timestampTo] Filter by timestamp to
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAuditLogs(projId, envId, pdpId, users, decision, resources, tenant, action, timestampFrom, timestampTo, page, perPage, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAuditLogs(projId, envId, pdpId, users, decision, resources, tenant, action, timestampFrom, timestampTo, page, perPage, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
    };
};
/**
 * AuditLogsApi - factory interface
 * @export
 */
exports.AuditLogsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.AuditLogsApiFp(configuration);
    return {
        /**
         *
         * @summary List Audit Logs
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} [pdpId] Filter by pdp config id
         * @param {Array<string>} [users] List of user keys or emails to filter by
         * @param {boolean} [decision] Filter by decision result
         * @param {Array<string>} [resources] Filter by resources
         * @param {string} [tenant] Filter by tenant
         * @param {string} [action] Filter by action
         * @param {number} [timestampFrom] Filter by timestamp from
         * @param {number} [timestampTo] Filter by timestamp to
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuditLogs(projId, envId, pdpId, users, decision, resources, tenant, action, timestampFrom, timestampTo, page, perPage, options) {
            return localVarFp
                .listAuditLogs(projId, envId, pdpId, users, decision, resources, tenant, action, timestampFrom, timestampTo, page, perPage, options)
                .then((request) => request(axios, basePath));
        },
    };
};
/**
 * AuditLogsApi - object-oriented interface
 * @export
 * @class AuditLogsApi
 * @extends {BaseAPI}
 */
class AuditLogsApi extends base_1.BaseAPI {
    /**
     *
     * @summary List Audit Logs
     * @param {AuditLogsApiListAuditLogsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditLogsApi
     */
    listAuditLogs(requestParameters, options) {
        return exports.AuditLogsApiFp(this.configuration)
            .listAuditLogs(requestParameters.projId, requestParameters.envId, requestParameters.pdpId, requestParameters.users, requestParameters.decision, requestParameters.resources, requestParameters.tenant, requestParameters.action, requestParameters.timestampFrom, requestParameters.timestampTo, requestParameters.page, requestParameters.perPage, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.AuditLogsApi = AuditLogsApi;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXVkaXQtbG9ncy1hcGkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvb3BlbmFwaS9hcGkvYXVkaXQtbG9ncy1hcGkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLG9CQUFvQjtBQUNwQixvQkFBb0I7QUFDcEI7Ozs7Ozs7Ozs7R0FVRzs7Ozs7O0FBRUgsa0RBQXFGO0FBRXJGLHlEQUF5RDtBQUN6RCxhQUFhO0FBQ2Isc0NBV21CO0FBQ25CLGFBQWE7QUFDYixrQ0FBNkY7QUFLN0Y7OztHQUdHO0FBQ1UsUUFBQSw2QkFBNkIsR0FBRyxVQUFVLGFBQTZCO0lBQ2xGLE9BQU87UUFDTDs7Ozs7Ozs7Ozs7Ozs7Ozs7V0FpQkc7UUFDSCxhQUFhLEVBQUUsS0FBSyxFQUNsQixNQUFjLEVBQ2QsS0FBYSxFQUNiLEtBQWMsRUFDZCxLQUFxQixFQUNyQixRQUFrQixFQUNsQixTQUF5QixFQUN6QixNQUFlLEVBQ2YsTUFBZSxFQUNmLGFBQXNCLEVBQ3RCLFdBQW9CLEVBQ3BCLElBQWEsRUFDYixPQUFnQixFQUNoQixVQUE4QixFQUFFLEVBQ1YsRUFBRTtZQUN4Qiw4REFBOEQ7WUFDOUQsMEJBQWlCLENBQUMsZUFBZSxFQUFFLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztZQUNyRCw2REFBNkQ7WUFDN0QsMEJBQWlCLENBQUMsZUFBZSxFQUFFLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztZQUNuRCxNQUFNLFlBQVksR0FBRyx3Q0FBd0M7aUJBQzFELE9BQU8sQ0FBQyxJQUFJLFNBQVMsR0FBRyxFQUFFLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO2lCQUM3RCxPQUFPLENBQUMsSUFBSSxRQUFRLEdBQUcsRUFBRSxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQy9ELG9GQUFvRjtZQUNwRixNQUFNLGNBQWMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxZQUFZ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