/* tslint:disable */
/* eslint-disable */
/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI } from '../base';
/**
 * TenantsApi - axios parameter creator
 * @export
 */
export const TenantsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Creates a new tenant inside the Permit.io system.  If the tenant is already created: will return 200 instead of 201, and will return the existing tenant object in the response body.
         * @summary Create Tenant
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {TenantCreate} tenantCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTenant: async (projId, envId, tenantCreate, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('createTenant', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('createTenant', 'envId', envId);
            // verify required parameter 'tenantCreate' is not null or undefined
            assertParamExists('createTenant', 'tenantCreate', tenantCreate);
            const localVarPath = `/v2/facts/{proj_id}/{env_id}/tenants`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(tenantCreate, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes the tenant and all its related data.
         * @summary Delete Tenant
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} tenantId Either the unique id of the tenant, or the URL-friendly key of the tenant (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTenant: async (projId, envId, tenantId, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('deleteTenant', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('deleteTenant', 'envId', envId);
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('deleteTenant', 'tenantId', tenantId);
            const localVarPath = `/v2/facts/{proj_id}/{env_id}/tenants/{tenant_id}`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'tenant_id'}}`, encodeURIComponent(String(tenantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a user under a tenant.
         * @summary Delete Tenant User
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} tenantId Either the unique id of the tenant, or the URL-friendly key of the tenant (i.e: the \&quot;slug\&quot;).
         * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTenantUser: async (projId, envId, tenantId, userId, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('deleteTenantUser', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('deleteTenantUser', 'envId', envId);
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('deleteTenantUser', 'tenantId', tenantId);
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('deleteTenantUser', 'userId', userId);
            const localVarPath = `/v2/facts/{proj_id}/{env_id}/tenants/{tenant_id}/users/{user_id}`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'tenant_id'}}`, encodeURIComponent(String(tenantId)))
                .replace(`{${'user_id'}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a tenant, if such tenant exists. Otherwise returns 404.
         * @summary Get Tenant
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} tenantId Either the unique id of the tenant, or the URL-friendly key of the tenant (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTenant: async (projId, envId, tenantId, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('getTenant', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('getTenant', 'envId', envId);
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('getTenant', 'tenantId', tenantId);
            const localVarPath = `/v2/facts/{proj_id}/{env_id}/tenants/{tenant_id}`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'tenant_id'}}`, encodeURIComponent(String(tenantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary List Tenant Users
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} tenantId Either the unique id of the tenant, or the URL-friendly key of the tenant (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} [search] Text search for the email field
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTenantUsers: async (projId, tenantId, envId, search, page, perPage, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('listTenantUsers', 'projId', projId);
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('listTenantUsers', 'tenantId', tenantId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('listTenantUsers', 'envId', envId);
            const localVarPath = `/v2/facts/{proj_id}/{env_id}/tenants/{tenant_id}/users`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'tenant_id'}}`, encodeURIComponent(String(tenantId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists all the tenants defined within an environment.
         * @summary List Tenants
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} [search] Text search for the tenant name or key
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTenants: async (projId, envId, search, page, perPage, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('listTenants', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('listTenants', 'envId', envId);
            const localVarPath = `/v2/facts/{proj_id}/{env_id}/tenants`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Partially updates the tenant definition. Fields that will be provided will be completely overwritten.
         * @summary Update Tenant
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} tenantId Either the unique id of the tenant, or the URL-friendly key of the tenant (i.e: the \&quot;slug\&quot;).
         * @param {TenantUpdate} tenantUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTenant: async (projId, envId, tenantId, tenantUpdate, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('updateTenant', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('updateTenant', 'envId', envId);
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('updateTenant', 'tenantId', tenantId);
            // verify required parameter 'tenantUpdate' is not null or undefined
            assertParamExists('updateTenant', 'tenantUpdate', tenantUpdate);
            const localVarPath = `/v2/facts/{proj_id}/{env_id}/tenants/{tenant_id}`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'tenant_id'}}`, encodeURIComponent(String(tenantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(tenantUpdate, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * TenantsApi - functional programming interface
 * @export
 */
export const TenantsApiFp = function (configuration) {
    const localVarAxiosParamCreator = TenantsApiAxiosParamCreator(configuration);
    return {
        /**
         * Creates a new tenant inside the Permit.io system.  If the tenant is already created: will return 200 instead of 201, and will return the existing tenant object in the response body.
         * @summary Create Tenant
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {TenantCreate} tenantCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTenant(projId, envId, tenantCreate, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTenant(projId, envId, tenantCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes the tenant and all its related data.
         * @summary Delete Tenant
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} tenantId Either the unique id of the tenant, or the URL-friendly key of the tenant (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTenant(projId, envId, tenantId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTenant(projId, envId, tenantId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes a user under a tenant.
         * @summary Delete Tenant User
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} tenantId Either the unique id of the tenant, or the URL-friendly key of the tenant (i.e: the \&quot;slug\&quot;).
         * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTenantUser(projId, envId, tenantId, userId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTenantUser(projId, envId, tenantId, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets a tenant, if such tenant exists. Otherwise returns 404.
         * @summary Get Tenant
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} tenantId Either the unique id of the tenant, or the URL-friendly key of the tenant (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTenant(projId, envId, tenantId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTenant(projId, envId, tenantId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary List Tenant Users
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} tenantId Either the unique id of the tenant, or the URL-friendly key of the tenant (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} [search] Text search for the email field
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTenantUsers(projId, tenantId, envId, search, page, perPage, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTenantUsers(projId, tenantId, envId, search, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists all the tenants defined within an environment.
         * @summary List Tenants
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} [search] Text search for the tenant name or key
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTenants(projId, envId, search, page, perPage, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTenants(projId, envId, search, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Partially updates the tenant definition. Fields that will be provided will be completely overwritten.
         * @summary Update Tenant
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} tenantId Either the unique id of the tenant, or the URL-friendly key of the tenant (i.e: the \&quot;slug\&quot;).
         * @param {TenantUpdate} tenantUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTenant(projId, envId, tenantId, tenantUpdate, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTenant(projId, envId, tenantId, tenantUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};
/**
 * TenantsApi - factory interface
 * @export
 */
export const TenantsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = TenantsApiFp(configuration);
    return {
        /**
         * Creates a new tenant inside the Permit.io system.  If the tenant is already created: will return 200 instead of 201, and will return the existing tenant object in the response body.
         * @summary Create Tenant
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {TenantCreate} tenantCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTenant(projId, envId, tenantCreate, options) {
            return localVarFp
                .createTenant(projId, envId, tenantCreate, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Deletes the tenant and all its related data.
         * @summary Delete Tenant
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} tenantId Either the unique id of the tenant, or the URL-friendly key of the tenant (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTenant(projId, envId, tenantId, options) {
            return localVarFp
                .deleteTenant(projId, envId, tenantId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Deletes a user under a tenant.
         * @summary Delete Tenant User
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} tenantId Either the unique id of the tenant, or the URL-friendly key of the tenant (i.e: the \&quot;slug\&quot;).
         * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTenantUser(projId, envId, tenantId, userId, options) {
            return localVarFp
                .deleteTenantUser(projId, envId, tenantId, userId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Gets a tenant, if such tenant exists. Otherwise returns 404.
         * @summary Get Tenant
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} tenantId Either the unique id of the tenant, or the URL-friendly key of the tenant (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTenant(projId, envId, tenantId, options) {
            return localVarFp
                .getTenant(projId, envId, tenantId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary List Tenant Users
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} tenantId Either the unique id of the tenant, or the URL-friendly key of the tenant (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} [search] Text search for the email field
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTenantUsers(projId, tenantId, envId, search, page, perPage, options) {
            return localVarFp
                .listTenantUsers(projId, tenantId, envId, search, page, perPage, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Lists all the tenants defined within an environment.
         * @summary List Tenants
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} [search] Text search for the tenant name or key
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTenants(projId, envId, search, page, perPage, options) {
            return localVarFp
                .listTenants(projId, envId, search, page, perPage, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Partially updates the tenant definition. Fields that will be provided will be completely overwritten.
         * @summary Update Tenant
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} tenantId Either the unique id of the tenant, or the URL-friendly key of the tenant (i.e: the \&quot;slug\&quot;).
         * @param {TenantUpdate} tenantUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTenant(projId, envId, tenantId, tenantUpdate, options) {
            return localVarFp
                .updateTenant(projId, envId, tenantId, tenantUpdate, options)
                .then((request) => request(axios, basePath));
        },
    };
};
/**
 * TenantsApi - object-oriented interface
 * @export
 * @class TenantsApi
 * @extends {BaseAPI}
 */
export class TenantsApi extends BaseAPI {
    /**
     * Creates a new tenant inside the Permit.io system.  If the tenant is already created: will return 200 instead of 201, and will return the existing tenant object in the response body.
     * @summary Create Tenant
     * @param {TenantsApiCreateTenantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantsApi
     */
    createTenant(requestParameters, options) {
        return TenantsApiFp(this.configuration)
            .createTenant(requestParameters.projId, requestParameters.envId, requestParameters.tenantCreate, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes the tenant and all its related data.
     * @summary Delete Tenant
     * @param {TenantsApiDeleteTenantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantsApi
     */
    deleteTenant(requestParameters, options) {
        return TenantsApiFp(this.configuration)
            .deleteTenant(requestParameters.projId, requestParameters.envId, requestParameters.tenantId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes a user under a tenant.
     * @summary Delete Tenant User
     * @param {TenantsApiDeleteTenantUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantsApi
     */
    deleteTenantUser(requestParameters, options) {
        return TenantsApiFp(this.configuration)
            .deleteTenantUser(requestParameters.projId, requestParameters.envId, requestParameters.tenantId, requestParameters.userId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gets a tenant, if such tenant exists. Otherwise returns 404.
     * @summary Get Tenant
     * @param {TenantsApiGetTenantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantsApi
     */
    getTenant(requestParameters, options) {
        return TenantsApiFp(this.configuration)
            .getTenant(requestParameters.projId, requestParameters.envId, requestParameters.tenantId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary List Tenant Users
     * @param {TenantsApiListTenantUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantsApi
     */
    listTenantUsers(requestParameters, options) {
        return TenantsApiFp(this.configuration)
            .listTenantUsers(requestParameters.projId, requestParameters.tenantId, requestParameters.envId, requestParameters.search, requestParameters.page, requestParameters.perPage, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists all the tenants defined within an environment.
     * @summary List Tenants
     * @param {TenantsApiListTenantsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantsApi
     */
    listTenants(requestParameters, options) {
        return TenantsApiFp(this.configuration)
            .listTenants(requestParameters.projId, requestParameters.envId, requestParameters.search, requestParameters.page, requestParameters.perPage, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Partially updates the tenant definition. Fields that will be provided will be completely overwritten.
     * @summary Update Tenant
     * @param {TenantsApiUpdateTenantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantsApi
     */
    updateTenant(requestParameters, options) {
        return TenantsApiFp(this.configuration)
            .updateTenant(requestParameters.projId, requestParameters.envId, requestParameters.tenantId, requestParameters.tenantUpdate, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
//# sourceMappingURL=data:application/json;base64,