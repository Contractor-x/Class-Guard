/* tslint:disable */
/* eslint-disable */
/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI } from '../base';
/**
 * MembersApi - axios parameter creator
 * @export
 */
export const MembersApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Deletes an account member matching the given id or email address. The member will be removed from the active account in permit.io.  If the member is the only member in its account (organization), returns 400 (bad request), due to nobody remains with access to the account, meaning deletion of the entire account (org). To completely remove an account, call DELETE `/orgs/{org}`.
         * @summary Delete Organization Member
         * @param {string} memberId Either the unique id (UUID) of the account member, or the email address of the account member.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrganizationMember: async (memberId, options = {}) => {
            // verify required parameter 'memberId' is not null or undefined
            assertParamExists('deleteOrganizationMember', 'memberId', memberId);
            const localVarPath = `/v2/members/{member_id}`.replace(`{${'member_id'}}`, encodeURIComponent(String(memberId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the authenticated account member\'s details.
         * @summary Get the authenticated account member
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatedMember: async (options = {}) => {
            const localVarPath = `/v2/members/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a single account member by its id or email address. matching the given member, if no such member exists under the current active account (organization), returns 404.
         * @summary Get Organization Member
         * @param {string} memberId Either the unique id (UUID) of the account member, or the email address of the account member.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationMember: async (memberId, options = {}) => {
            // verify required parameter 'memberId' is not null or undefined
            assertParamExists('getOrganizationMember', 'memberId', memberId);
            const localVarPath = `/v2/members/{member_id}`.replace(`{${'member_id'}}`, encodeURIComponent(String(memberId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists all the account members that have access to the current active account. The active account/organization is determined by the API Key used or by the authenticated session id.
         * @summary List Organization Members
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrganizationMembers: async (page, perPage, options = {}) => {
            const localVarPath = `/v2/members`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an account member\'s settings.
         * @summary Update Organization Member
         * @param {string} memberId Either the unique id (UUID) of the account member, or the email address of the account member.
         * @param {OrgMemberUpdate} orgMemberUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrganizationMember: async (memberId, orgMemberUpdate, options = {}) => {
            // verify required parameter 'memberId' is not null or undefined
            assertParamExists('updateOrganizationMember', 'memberId', memberId);
            // verify required parameter 'orgMemberUpdate' is not null or undefined
            assertParamExists('updateOrganizationMember', 'orgMemberUpdate', orgMemberUpdate);
            const localVarPath = `/v2/members/{member_id}`.replace(`{${'member_id'}}`, encodeURIComponent(String(memberId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(orgMemberUpdate, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * MembersApi - functional programming interface
 * @export
 */
export const MembersApiFp = function (configuration) {
    const localVarAxiosParamCreator = MembersApiAxiosParamCreator(configuration);
    return {
        /**
         * Deletes an account member matching the given id or email address. The member will be removed from the active account in permit.io.  If the member is the only member in its account (organization), returns 400 (bad request), due to nobody remains with access to the account, meaning deletion of the entire account (org). To completely remove an account, call DELETE `/orgs/{org}`.
         * @summary Delete Organization Member
         * @param {string} memberId Either the unique id (UUID) of the account member, or the email address of the account member.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOrganizationMember(memberId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOrganizationMember(memberId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets the authenticated account member\'s details.
         * @summary Get the authenticated account member
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAuthenticatedMember(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAuthenticatedMember(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets a single account member by its id or email address. matching the given member, if no such member exists under the current active account (organization), returns 404.
         * @summary Get Organization Member
         * @param {string} memberId Either the unique id (UUID) of the account member, or the email address of the account member.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizationMember(memberId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganizationMember(memberId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists all the account members that have access to the current active account. The active account/organization is determined by the API Key used or by the authenticated session id.
         * @summary List Organization Members
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listOrganizationMembers(page, perPage, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listOrganizationMembers(page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates an account member\'s settings.
         * @summary Update Organization Member
         * @param {string} memberId Either the unique id (UUID) of the account member, or the email address of the account member.
         * @param {OrgMemberUpdate} orgMemberUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOrganizationMember(memberId, orgMemberUpdate, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateOrganizationMember(memberId, orgMemberUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};
/**
 * MembersApi - factory interface
 * @export
 */
export const MembersApiFactory = function (configuration, basePath, axios) {
    const localVarFp = MembersApiFp(configuration);
    return {
        /**
         * Deletes an account member matching the given id or email address. The member will be removed from the active account in permit.io.  If the member is the only member in its account (organization), returns 400 (bad request), due to nobody remains with access to the account, meaning deletion of the entire account (org). To completely remove an account, call DELETE `/orgs/{org}`.
         * @summary Delete Organization Member
         * @param {string} memberId Either the unique id (UUID) of the account member, or the email address of the account member.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrganizationMember(memberId, options) {
            return localVarFp
                .deleteOrganizationMember(memberId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Gets the authenticated account member\'s details.
         * @summary Get the authenticated account member
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatedMember(options) {
            return localVarFp.getAuthenticatedMember(options).then((request) => request(axios, basePath));
        },
        /**
         * Gets a single account member by its id or email address. matching the given member, if no such member exists under the current active account (organization), returns 404.
         * @summary Get Organization Member
         * @param {string} memberId Either the unique id (UUID) of the account member, or the email address of the account member.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationMember(memberId, options) {
            return localVarFp
                .getOrganizationMember(memberId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Lists all the account members that have access to the current active account. The active account/organization is determined by the API Key used or by the authenticated session id.
         * @summary List Organization Members
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrganizationMembers(page, perPage, options) {
            return localVarFp
                .listOrganizationMembers(page, perPage, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Updates an account member\'s settings.
         * @summary Update Organization Member
         * @param {string} memberId Either the unique id (UUID) of the account member, or the email address of the account member.
         * @param {OrgMemberUpdate} orgMemberUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrganizationMember(memberId, orgMemberUpdate, options) {
            return localVarFp
                .updateOrganizationMember(memberId, orgMemberUpdate, options)
                .then((request) => request(axios, basePath));
        },
    };
};
/**
 * MembersApi - object-oriented interface
 * @export
 * @class MembersApi
 * @extends {BaseAPI}
 */
export class MembersApi extends BaseAPI {
    /**
     * Deletes an account member matching the given id or email address. The member will be removed from the active account in permit.io.  If the member is the only member in its account (organization), returns 400 (bad request), due to nobody remains with access to the account, meaning deletion of the entire account (org). To completely remove an account, call DELETE `/orgs/{org}`.
     * @summary Delete Organization Member
     * @param {MembersApiDeleteOrganizationMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApi
     */
    deleteOrganizationMember(requestParameters, options) {
        return MembersApiFp(this.configuration)
            .deleteOrganizationMember(requestParameters.memberId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gets the authenticated account member\'s details.
     * @summary Get the authenticated account member
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApi
     */
    getAuthenticatedMember(options) {
        return MembersApiFp(this.configuration)
            .getAuthenticatedMember(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gets a single account member by its id or email address. matching the given member, if no such member exists under the current active account (organization), returns 404.
     * @summary Get Organization Member
     * @param {MembersApiGetOrganizationMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApi
     */
    getOrganizationMember(requestParameters, options) {
        return MembersApiFp(this.configuration)
            .getOrganizationMember(requestParameters.memberId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists all the account members that have access to the current active account. The active account/organization is determined by the API Key used or by the authenticated session id.
     * @summary List Organization Members
     * @param {MembersApiListOrganizationMembersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApi
     */
    listOrganizationMembers(requestParameters = {}, options) {
        return MembersApiFp(this.configuration)
            .listOrganizationMembers(requestParameters.page, requestParameters.perPage, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates an account member\'s settings.
     * @summary Update Organization Member
     * @param {MembersApiUpdateOrganizationMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApi
     */
    updateOrganizationMember(requestParameters, options) {
        return MembersApiFp(this.configuration)
            .updateOrganizationMember(requestParameters.memberId, requestParameters.orgMemberUpdate, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
//# sourceMappingURL=data:application/json;base64,