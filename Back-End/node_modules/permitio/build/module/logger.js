import util from 'util';
import winston from 'winston';
export function prettyConsoleLog(label, data) {
    console.log(label, util.inspect(data, false, 12, true));
}
const FgGreen = '\x1b[32m';
const FgCyan = '\x1b[36m';
// const COLOR_RESET: string = "\x1b[0m";
// const FgBlack: string = "\x1b[30m";
// const FgRed: string = "\x1b[31m";
// const FgYellow: string = "\x1b[33m";
// const FgBlue: string = "\x1b[34m";
// const FgMagenta: string = "\x1b[35m";
// const FgWhite: string = "\x1b[37m";
const consoleFormat = winston.format.printf(({ level, message, label }) => {
    return `${FgCyan}${label} [${level}]: ${FgGreen} ${message}`;
});
const MESSAGE = Symbol.for('message');
const LEVEL = Symbol.for('level');
class SimpleConsoleTransport extends winston.transports.Console {
    log(info, callback) {
        setImmediate(() => this.emit('logged', info));
        if (this.stderrLevels[info[LEVEL]]) {
            console.error(info[MESSAGE]);
        }
        else {
            console.log(info[MESSAGE]);
        }
        if (callback) {
            callback();
        }
    }
}
export class LoggerFactory {
    static createLogger(config) {
        return winston.createLogger({
            level: config.log.level,
            format: winston.format.simple(),
            transports: [
                new SimpleConsoleTransport({
                    format: winston.format.combine(winston.format.label({ label: config.log.label }), winston.format.timestamp(), config.log.json ? winston.format.prettyPrint() : consoleFormat, winston.format.colorize({ all: true })),
                }),
            ],
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xvZ2dlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLElBQUksTUFBTSxNQUFNLENBQUM7QUFFeEIsT0FBTyxPQUFPLE1BQU0sU0FBUyxDQUFDO0FBSTlCLE1BQU0sVUFBVSxnQkFBZ0IsQ0FBQyxLQUFhLEVBQUUsSUFBUztJQUN2RCxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDMUQsQ0FBQztBQUVELE1BQU0sT0FBTyxHQUFHLFVBQVUsQ0FBQztBQUMzQixNQUFNLE1BQU0sR0FBRyxVQUFVLENBQUM7QUFDMUIseUNBQXlDO0FBQ3pDLHNDQUFzQztBQUN0QyxvQ0FBb0M7QUFDcEMsdUNBQXVDO0FBQ3ZDLHFDQUFxQztBQUNyQyx3Q0FBd0M7QUFDeEMsc0NBQXNDO0FBRXRDLE1BQU0sYUFBYSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUU7SUFDeEUsT0FBTyxHQUFHLE1BQU0sR0FBRyxLQUFLLEtBQUssS0FBSyxNQUFNLE9BQU8sSUFBSSxPQUFPLEVBQUUsQ0FBQztBQUMvRCxDQUFDLENBQUMsQ0FBQztBQUVILE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDdEMsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUVsQyxNQUFNLHNCQUF1QixTQUFRLE9BQU8sQ0FBQyxVQUFVLENBQUMsT0FBTztJQUM3RCxHQUFHLENBQUMsSUFBUyxFQUFFLFFBQWE7UUFDMUIsWUFBWSxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7UUFFOUMsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO1lBQ2xDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7U0FDOUI7YUFBTTtZQUNMLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7U0FDNUI7UUFFRCxJQUFJLFFBQVEsRUFBRTtZQUNaLFFBQVEsRUFBRSxDQUFDO1NBQ1o7SUFDSCxDQUFDO0NBQ0Y7QUFFRCxNQUFNLE9BQU8sYUFBYTtJQUN4QixNQUFNLENBQUMsWUFBWSxDQUFDLE1BQXFCO1FBQ3ZDLE9BQU8sT0FBTyxDQUFDLFlBQVksQ0FBQztZQUMxQixLQUFLLEVBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLO1lBQ3ZCLE1BQU0sRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRTtZQUMvQixVQUFVLEVBQUU7Z0JBQ1YsSUFBSSxzQkFBc0IsQ0FBQztvQkFDekIsTUFBTSxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUM1QixPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQ2pELE9BQU8sQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLEVBQzFCLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQyxhQUFhLEVBQzlELE9BQU8sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxDQUFDLENBQ3ZDO2lCQUNGLENBQUM7YUFDSDtTQUNGLENBQUMsQ0FBQztJQUNMLENBQUM7Q0FDRiJ9