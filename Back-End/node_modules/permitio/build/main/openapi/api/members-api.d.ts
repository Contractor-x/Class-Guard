/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { OrgMemberRead } from '../types';
import { OrgMemberUpdate } from '../types';
/**
 * MembersApi - axios parameter creator
 * @export
 */
export declare const MembersApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Deletes an account member matching the given id or email address. The member will be removed from the active account in permit.io.  If the member is the only member in its account (organization), returns 400 (bad request), due to nobody remains with access to the account, meaning deletion of the entire account (org). To completely remove an account, call DELETE `/orgs/{org}`.
     * @summary Delete Organization Member
     * @param {string} memberId Either the unique id (UUID) of the account member, or the email address of the account member.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrganizationMember: (memberId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets the authenticated account member\'s details.
     * @summary Get the authenticated account member
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthenticatedMember: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets a single account member by its id or email address. matching the given member, if no such member exists under the current active account (organization), returns 404.
     * @summary Get Organization Member
     * @param {string} memberId Either the unique id (UUID) of the account member, or the email address of the account member.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationMember: (memberId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Lists all the account members that have access to the current active account. The active account/organization is determined by the API Key used or by the authenticated session id.
     * @summary List Organization Members
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listOrganizationMembers: (page?: number | undefined, perPage?: number | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Updates an account member\'s settings.
     * @summary Update Organization Member
     * @param {string} memberId Either the unique id (UUID) of the account member, or the email address of the account member.
     * @param {OrgMemberUpdate} orgMemberUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrganizationMember: (memberId: string, orgMemberUpdate: OrgMemberUpdate, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * MembersApi - functional programming interface
 * @export
 */
export declare const MembersApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Deletes an account member matching the given id or email address. The member will be removed from the active account in permit.io.  If the member is the only member in its account (organization), returns 400 (bad request), due to nobody remains with access to the account, meaning deletion of the entire account (org). To completely remove an account, call DELETE `/orgs/{org}`.
     * @summary Delete Organization Member
     * @param {string} memberId Either the unique id (UUID) of the account member, or the email address of the account member.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrganizationMember(memberId: string, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * Gets the authenticated account member\'s details.
     * @summary Get the authenticated account member
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthenticatedMember(options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<OrgMemberRead>>;
    /**
     * Gets a single account member by its id or email address. matching the given member, if no such member exists under the current active account (organization), returns 404.
     * @summary Get Organization Member
     * @param {string} memberId Either the unique id (UUID) of the account member, or the email address of the account member.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationMember(memberId: string, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<OrgMemberRead>>;
    /**
     * Lists all the account members that have access to the current active account. The active account/organization is determined by the API Key used or by the authenticated session id.
     * @summary List Organization Members
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listOrganizationMembers(page?: number | undefined, perPage?: number | undefined, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Array<OrgMemberRead>>>;
    /**
     * Updates an account member\'s settings.
     * @summary Update Organization Member
     * @param {string} memberId Either the unique id (UUID) of the account member, or the email address of the account member.
     * @param {OrgMemberUpdate} orgMemberUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrganizationMember(memberId: string, orgMemberUpdate: OrgMemberUpdate, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<OrgMemberRead>>;
};
/**
 * MembersApi - factory interface
 * @export
 */
export declare const MembersApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Deletes an account member matching the given id or email address. The member will be removed from the active account in permit.io.  If the member is the only member in its account (organization), returns 400 (bad request), due to nobody remains with access to the account, meaning deletion of the entire account (org). To completely remove an account, call DELETE `/orgs/{org}`.
     * @summary Delete Organization Member
     * @param {string} memberId Either the unique id (UUID) of the account member, or the email address of the account member.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrganizationMember(memberId: string, options?: any): AxiosPromise<void>;
    /**
     * Gets the authenticated account member\'s details.
     * @summary Get the authenticated account member
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthenticatedMember(options?: any): AxiosPromise<OrgMemberRead>;
    /**
     * Gets a single account member by its id or email address. matching the given member, if no such member exists under the current active account (organization), returns 404.
     * @summary Get Organization Member
     * @param {string} memberId Either the unique id (UUID) of the account member, or the email address of the account member.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationMember(memberId: string, options?: any): AxiosPromise<OrgMemberRead>;
    /**
     * Lists all the account members that have access to the current active account. The active account/organization is determined by the API Key used or by the authenticated session id.
     * @summary List Organization Members
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listOrganizationMembers(page?: number | undefined, perPage?: number | undefined, options?: any): AxiosPromise<Array<OrgMemberRead>>;
    /**
     * Updates an account member\'s settings.
     * @summary Update Organization Member
     * @param {string} memberId Either the unique id (UUID) of the account member, or the email address of the account member.
     * @param {OrgMemberUpdate} orgMemberUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrganizationMember(memberId: string, orgMemberUpdate: OrgMemberUpdate, options?: any): AxiosPromise<OrgMemberRead>;
};
/**
 * Request parameters for deleteOrganizationMember operation in MembersApi.
 * @export
 * @interface MembersApiDeleteOrganizationMemberRequest
 */
export interface MembersApiDeleteOrganizationMemberRequest {
    /**
     * Either the unique id (UUID) of the account member, or the email address of the account member.
     * @type {string}
     * @memberof MembersApiDeleteOrganizationMember
     */
    readonly memberId: string;
}
/**
 * Request parameters for getOrganizationMember operation in MembersApi.
 * @export
 * @interface MembersApiGetOrganizationMemberRequest
 */
export interface MembersApiGetOrganizationMemberRequest {
    /**
     * Either the unique id (UUID) of the account member, or the email address of the account member.
     * @type {string}
     * @memberof MembersApiGetOrganizationMember
     */
    readonly memberId: string;
}
/**
 * Request parameters for listOrganizationMembers operation in MembersApi.
 * @export
 * @interface MembersApiListOrganizationMembersRequest
 */
export interface MembersApiListOrganizationMembersRequest {
    /**
     * Page number of the results to fetch, starting at 1.
     * @type {number}
     * @memberof MembersApiListOrganizationMembers
     */
    readonly page?: number;
    /**
     * The number of results per page (max 100).
     * @type {number}
     * @memberof MembersApiListOrganizationMembers
     */
    readonly perPage?: number;
}
/**
 * Request parameters for updateOrganizationMember operation in MembersApi.
 * @export
 * @interface MembersApiUpdateOrganizationMemberRequest
 */
export interface MembersApiUpdateOrganizationMemberRequest {
    /**
     * Either the unique id (UUID) of the account member, or the email address of the account member.
     * @type {string}
     * @memberof MembersApiUpdateOrganizationMember
     */
    readonly memberId: string;
    /**
     *
     * @type {OrgMemberUpdate}
     * @memberof MembersApiUpdateOrganizationMember
     */
    readonly orgMemberUpdate: OrgMemberUpdate;
}
/**
 * MembersApi - object-oriented interface
 * @export
 * @class MembersApi
 * @extends {BaseAPI}
 */
export declare class MembersApi extends BaseAPI {
    /**
     * Deletes an account member matching the given id or email address. The member will be removed from the active account in permit.io.  If the member is the only member in its account (organization), returns 400 (bad request), due to nobody remains with access to the account, meaning deletion of the entire account (org). To completely remove an account, call DELETE `/orgs/{org}`.
     * @summary Delete Organization Member
     * @param {MembersApiDeleteOrganizationMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApi
     */
    deleteOrganizationMember(requestParameters: MembersApiDeleteOrganizationMemberRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Gets the authenticated account member\'s details.
     * @summary Get the authenticated account member
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApi
     */
    getAuthenticatedMember(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<OrgMemberRead>>;
    /**
     * Gets a single account member by its id or email address. matching the given member, if no such member exists under the current active account (organization), returns 404.
     * @summary Get Organization Member
     * @param {MembersApiGetOrganizationMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApi
     */
    getOrganizationMember(requestParameters: MembersApiGetOrganizationMemberRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<OrgMemberRead>>;
    /**
     * Lists all the account members that have access to the current active account. The active account/organization is determined by the API Key used or by the authenticated session id.
     * @summary List Organization Members
     * @param {MembersApiListOrganizationMembersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApi
     */
    listOrganizationMembers(requestParameters?: MembersApiListOrganizationMembersRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<OrgMemberRead[]>>;
    /**
     * Updates an account member\'s settings.
     * @summary Update Organization Member
     * @param {MembersApiUpdateOrganizationMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApi
     */
    updateOrganizationMember(requestParameters: MembersApiUpdateOrganizationMemberRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<OrgMemberRead>>;
}
