/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { EnvironmentCreate } from '../types';
import { EnvironmentRead } from '../types';
import { EnvironmentStats } from '../types';
import { EnvironmentUpdate } from '../types';
/**
 * EnvironmentsApi - axios parameter creator
 * @export
 */
export declare const EnvironmentsApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Creates a new environment under a given project.
     * @summary Create Environment
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {EnvironmentCreate} environmentCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEnvironment: (projId: string, environmentCreate: EnvironmentCreate, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes an environment and all its related data.
     * @summary Delete Environment
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEnvironment: (projId: string, envId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets a single environment matching the given env_id, if such environment exists.
     * @summary Get Environment
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEnvironment: (projId: string, envId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Lists all the environments under a given project.
     * @summary List Environments
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listEnvironments: (projId: string, page?: number | undefined, perPage?: number | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Stats Environments
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    statsEnvironments: (projId: string, envId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Updates the environment.
     * @summary Update Environment
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {EnvironmentUpdate} environmentUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEnvironment: (projId: string, envId: string, environmentUpdate: EnvironmentUpdate, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * EnvironmentsApi - functional programming interface
 * @export
 */
export declare const EnvironmentsApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Creates a new environment under a given project.
     * @summary Create Environment
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {EnvironmentCreate} environmentCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEnvironment(projId: string, environmentCreate: EnvironmentCreate, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<EnvironmentRead>>;
    /**
     * Deletes an environment and all its related data.
     * @summary Delete Environment
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEnvironment(projId: string, envId: string, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * Gets a single environment matching the given env_id, if such environment exists.
     * @summary Get Environment
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEnvironment(projId: string, envId: string, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<EnvironmentRead>>;
    /**
     * Lists all the environments under a given project.
     * @summary List Environments
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listEnvironments(projId: string, page?: number | undefined, perPage?: number | undefined, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Array<EnvironmentRead>>>;
    /**
     *
     * @summary Stats Environments
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    statsEnvironments(projId: string, envId: string, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<EnvironmentStats>>;
    /**
     * Updates the environment.
     * @summary Update Environment
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {EnvironmentUpdate} environmentUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEnvironment(projId: string, envId: string, environmentUpdate: EnvironmentUpdate, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<EnvironmentRead>>;
};
/**
 * EnvironmentsApi - factory interface
 * @export
 */
export declare const EnvironmentsApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Creates a new environment under a given project.
     * @summary Create Environment
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {EnvironmentCreate} environmentCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEnvironment(projId: string, environmentCreate: EnvironmentCreate, options?: any): AxiosPromise<EnvironmentRead>;
    /**
     * Deletes an environment and all its related data.
     * @summary Delete Environment
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEnvironment(projId: string, envId: string, options?: any): AxiosPromise<void>;
    /**
     * Gets a single environment matching the given env_id, if such environment exists.
     * @summary Get Environment
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEnvironment(projId: string, envId: string, options?: any): AxiosPromise<EnvironmentRead>;
    /**
     * Lists all the environments under a given project.
     * @summary List Environments
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listEnvironments(projId: string, page?: number | undefined, perPage?: number | undefined, options?: any): AxiosPromise<Array<EnvironmentRead>>;
    /**
     *
     * @summary Stats Environments
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    statsEnvironments(projId: string, envId: string, options?: any): AxiosPromise<EnvironmentStats>;
    /**
     * Updates the environment.
     * @summary Update Environment
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {EnvironmentUpdate} environmentUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEnvironment(projId: string, envId: string, environmentUpdate: EnvironmentUpdate, options?: any): AxiosPromise<EnvironmentRead>;
};
/**
 * Request parameters for createEnvironment operation in EnvironmentsApi.
 * @export
 * @interface EnvironmentsApiCreateEnvironmentRequest
 */
export interface EnvironmentsApiCreateEnvironmentRequest {
    /**
     * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof EnvironmentsApiCreateEnvironment
     */
    readonly projId: string;
    /**
     *
     * @type {EnvironmentCreate}
     * @memberof EnvironmentsApiCreateEnvironment
     */
    readonly environmentCreate: EnvironmentCreate;
}
/**
 * Request parameters for deleteEnvironment operation in EnvironmentsApi.
 * @export
 * @interface EnvironmentsApiDeleteEnvironmentRequest
 */
export interface EnvironmentsApiDeleteEnvironmentRequest {
    /**
     * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof EnvironmentsApiDeleteEnvironment
     */
    readonly projId: string;
    /**
     * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof EnvironmentsApiDeleteEnvironment
     */
    readonly envId: string;
}
/**
 * Request parameters for getEnvironment operation in EnvironmentsApi.
 * @export
 * @interface EnvironmentsApiGetEnvironmentRequest
 */
export interface EnvironmentsApiGetEnvironmentRequest {
    /**
     * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof EnvironmentsApiGetEnvironment
     */
    readonly projId: string;
    /**
     * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof EnvironmentsApiGetEnvironment
     */
    readonly envId: string;
}
/**
 * Request parameters for listEnvironments operation in EnvironmentsApi.
 * @export
 * @interface EnvironmentsApiListEnvironmentsRequest
 */
export interface EnvironmentsApiListEnvironmentsRequest {
    /**
     * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof EnvironmentsApiListEnvironments
     */
    readonly projId: string;
    /**
     * Page number of the results to fetch, starting at 1.
     * @type {number}
     * @memberof EnvironmentsApiListEnvironments
     */
    readonly page?: number;
    /**
     * The number of results per page (max 100).
     * @type {number}
     * @memberof EnvironmentsApiListEnvironments
     */
    readonly perPage?: number;
}
/**
 * Request parameters for statsEnvironments operation in EnvironmentsApi.
 * @export
 * @interface EnvironmentsApiStatsEnvironmentsRequest
 */
export interface EnvironmentsApiStatsEnvironmentsRequest {
    /**
     * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof EnvironmentsApiStatsEnvironments
     */
    readonly projId: string;
    /**
     * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof EnvironmentsApiStatsEnvironments
     */
    readonly envId: string;
}
/**
 * Request parameters for updateEnvironment operation in EnvironmentsApi.
 * @export
 * @interface EnvironmentsApiUpdateEnvironmentRequest
 */
export interface EnvironmentsApiUpdateEnvironmentRequest {
    /**
     * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof EnvironmentsApiUpdateEnvironment
     */
    readonly projId: string;
    /**
     * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof EnvironmentsApiUpdateEnvironment
     */
    readonly envId: string;
    /**
     *
     * @type {EnvironmentUpdate}
     * @memberof EnvironmentsApiUpdateEnvironment
     */
    readonly environmentUpdate: EnvironmentUpdate;
}
/**
 * EnvironmentsApi - object-oriented interface
 * @export
 * @class EnvironmentsApi
 * @extends {BaseAPI}
 */
export declare class EnvironmentsApi extends BaseAPI {
    /**
     * Creates a new environment under a given project.
     * @summary Create Environment
     * @param {EnvironmentsApiCreateEnvironmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentsApi
     */
    createEnvironment(requestParameters: EnvironmentsApiCreateEnvironmentRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<EnvironmentRead>>;
    /**
     * Deletes an environment and all its related data.
     * @summary Delete Environment
     * @param {EnvironmentsApiDeleteEnvironmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentsApi
     */
    deleteEnvironment(requestParameters: EnvironmentsApiDeleteEnvironmentRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Gets a single environment matching the given env_id, if such environment exists.
     * @summary Get Environment
     * @param {EnvironmentsApiGetEnvironmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentsApi
     */
    getEnvironment(requestParameters: EnvironmentsApiGetEnvironmentRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<EnvironmentRead>>;
    /**
     * Lists all the environments under a given project.
     * @summary List Environments
     * @param {EnvironmentsApiListEnvironmentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentsApi
     */
    listEnvironments(requestParameters: EnvironmentsApiListEnvironmentsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<EnvironmentRead[]>>;
    /**
     *
     * @summary Stats Environments
     * @param {EnvironmentsApiStatsEnvironmentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentsApi
     */
    statsEnvironments(requestParameters: EnvironmentsApiStatsEnvironmentsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<EnvironmentStats>>;
    /**
     * Updates the environment.
     * @summary Update Environment
     * @param {EnvironmentsApiUpdateEnvironmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentsApi
     */
    updateEnvironment(requestParameters: EnvironmentsApiUpdateEnvironmentRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<EnvironmentRead>>;
}
