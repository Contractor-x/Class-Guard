"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserAttributesApi = exports.UserAttributesApiFactory = exports.UserAttributesApiFp = exports.UserAttributesApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * UserAttributesApi - axios parameter creator
 * @export
 */
exports.UserAttributesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Creates a new attribute for the User resource.
         * @summary Create User Attribute
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {ResourceAttributeCreate} resourceAttributeCreate
         * @param {string} [resourceId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserAttribute: async (projId, envId, resourceAttributeCreate, resourceId, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            common_1.assertParamExists('createUserAttribute', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            common_1.assertParamExists('createUserAttribute', 'envId', envId);
            // verify required parameter 'resourceAttributeCreate' is not null or undefined
            common_1.assertParamExists('createUserAttribute', 'resourceAttributeCreate', resourceAttributeCreate);
            const localVarPath = `/v2/schema/{proj_id}/{env_id}/users/attributes`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (resourceId !== undefined) {
                localVarQueryParameter['resource_id'] = resourceId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(resourceAttributeCreate, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes the attribute and all its related data.  Note: If the attribute is used by policies, removing it will cause the attribute to evaluate as `undefined`.
         * @summary Delete User Attribute
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} attributeId Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the \&quot;slug\&quot;).
         * @param {string} [resourceId]
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserAttribute: async (projId, envId, attributeId, resourceId, page, perPage, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            common_1.assertParamExists('deleteUserAttribute', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            common_1.assertParamExists('deleteUserAttribute', 'envId', envId);
            // verify required parameter 'attributeId' is not null or undefined
            common_1.assertParamExists('deleteUserAttribute', 'attributeId', attributeId);
            const localVarPath = `/v2/schema/{proj_id}/{env_id}/users/attributes/{attribute_id}`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'attribute_id'}}`, encodeURIComponent(String(attributeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (resourceId !== undefined) {
                localVarQueryParameter['resource_id'] = resourceId;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a single attribute defined on the User resource, if such attribute exists.
         * @summary Get User Attribute
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} attributeId Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the \&quot;slug\&quot;).
         * @param {string} [resourceId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserAttribute: async (projId, envId, attributeId, resourceId, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            common_1.assertParamExists('getUserAttribute', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            common_1.assertParamExists('getUserAttribute', 'envId', envId);
            // verify required parameter 'attributeId' is not null or undefined
            common_1.assertParamExists('getUserAttribute', 'attributeId', attributeId);
            const localVarPath = `/v2/schema/{proj_id}/{env_id}/users/attributes/{attribute_id}`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'attribute_id'}}`, encodeURIComponent(String(attributeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (resourceId !== undefined) {
                localVarQueryParameter['resource_id'] = resourceId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists all the attributes defined on the User resource.
         * @summary List User Attributes
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} [resourceId]
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserAttributes: async (projId, envId, resourceId, page, perPage, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            common_1.assertParamExists('listUserAttributes', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            common_1.assertParamExists('listUserAttributes', 'envId', envId);
            const localVarPath = `/v2/schema/{proj_id}/{env_id}/users/attributes`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (resourceId !== undefined) {
                localVarQueryParameter['resource_id'] = resourceId;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Partially updates the attribute defined on the User resource. Fields that will be provided will be completely overwritten.
         * @summary Update User Attribute
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} attributeId Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the \&quot;slug\&quot;).
         * @param {ResourceAttributeUpdate} resourceAttributeUpdate
         * @param {string} [resourceId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserAttribute: async (projId, envId, attributeId, resourceAttributeUpdate, resourceId, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            common_1.assertParamExists('updateUserAttribute', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            common_1.assertParamExists('updateUserAttribute', 'envId', envId);
            // verify required parameter 'attributeId' is not null or undefined
            common_1.assertParamExists('updateUserAttribute', 'attributeId', attributeId);
            // verify required parameter 'resourceAttributeUpdate' is not null or undefined
            common_1.assertParamExists('updateUserAttribute', 'resourceAttributeUpdate', resourceAttributeUpdate);
            const localVarPath = `/v2/schema/{proj_id}/{env_id}/users/attributes/{attribute_id}`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'attribute_id'}}`, encodeURIComponent(String(attributeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (resourceId !== undefined) {
                localVarQueryParameter['resource_id'] = resourceId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(resourceAttributeUpdate, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * UserAttributesApi - functional programming interface
 * @export
 */
exports.UserAttributesApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.UserAttributesApiAxiosParamCreator(configuration);
    return {
        /**
         * Creates a new attribute for the User resource.
         * @summary Create User Attribute
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {ResourceAttributeCreate} resourceAttributeCreate
         * @param {string} [resourceId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUserAttribute(projId, envId, resourceAttributeCreate, resourceId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUserAttribute(projId, envId, resourceAttributeCreate, resourceId, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Deletes the attribute and all its related data.  Note: If the attribute is used by policies, removing it will cause the attribute to evaluate as `undefined`.
         * @summary Delete User Attribute
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} attributeId Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the \&quot;slug\&quot;).
         * @param {string} [resourceId]
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserAttribute(projId, envId, attributeId, resourceId, page, perPage, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUserAttribute(projId, envId, attributeId, resourceId, page, perPage, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Gets a single attribute defined on the User resource, if such attribute exists.
         * @summary Get User Attribute
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} attributeId Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the \&quot;slug\&quot;).
         * @param {string} [resourceId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserAttribute(projId, envId, attributeId, resourceId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserAttribute(projId, envId, attributeId, resourceId, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Lists all the attributes defined on the User resource.
         * @summary List User Attributes
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} [resourceId]
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserAttributes(projId, envId, resourceId, page, perPage, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUserAttributes(projId, envId, resourceId, page, perPage, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Partially updates the attribute defined on the User resource. Fields that will be provided will be completely overwritten.
         * @summary Update User Attribute
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} attributeId Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the \&quot;slug\&quot;).
         * @param {ResourceAttributeUpdate} resourceAttributeUpdate
         * @param {string} [resourceId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserAttribute(projId, envId, attributeId, resourceAttributeUpdate, resourceId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserAttribute(projId, envId, attributeId, resourceAttributeUpdate, resourceId, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
    };
};
/**
 * UserAttributesApi - factory interface
 * @export
 */
exports.UserAttributesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.UserAttributesApiFp(configuration);
    return {
        /**
         * Creates a new attribute for the User resource.
         * @summary Create User Attribute
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {ResourceAttributeCreate} resourceAttributeCreate
         * @param {string} [resourceId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserAttribute(projId, envId, resourceAttributeCreate, resourceId, options) {
            return localVarFp
                .createUserAttribute(projId, envId, resourceAttributeCreate, resourceId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Deletes the attribute and all its related data.  Note: If the attribute is used by policies, removing it will cause the attribute to evaluate as `undefined`.
         * @summary Delete User Attribute
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} attributeId Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the \&quot;slug\&quot;).
         * @param {string} [resourceId]
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserAttribute(projId, envId, attributeId, resourceId, page, perPage, options) {
            return localVarFp
                .deleteUserAttribute(projId, envId, attributeId, resourceId, page, perPage, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Gets a single attribute defined on the User resource, if such attribute exists.
         * @summary Get User Attribute
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} attributeId Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the \&quot;slug\&quot;).
         * @param {string} [resourceId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserAttribute(projId, envId, attributeId, resourceId, options) {
            return localVarFp
                .getUserAttribute(projId, envId, attributeId, resourceId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Lists all the attributes defined on the User resource.
         * @summary List User Attributes
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} [resourceId]
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserAttributes(projId, envId, resourceId, page, perPage, options) {
            return localVarFp
                .listUserAttributes(projId, envId, resourceId, page, perPage, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Partially updates the attribute defined on the User resource. Fields that will be provided will be completely overwritten.
         * @summary Update User Attribute
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} attributeId Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the \&quot;slug\&quot;).
         * @param {ResourceAttributeUpdate} resourceAttributeUpdate
         * @param {string} [resourceId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserAttribute(projId, envId, attributeId, resourceAttributeUpdate, resourceId, options) {
            return localVarFp
                .updateUserAttribute(projId, envId, attributeId, resourceAttributeUpdate, resourceId, options)
                .then((request) => request(axios, basePath));
        },
    };
};
/**
 * UserAttributesApi - object-oriented interface
 * @export
 * @class UserAttributesApi
 * @extends {BaseAPI}
 */
class UserAttributesApi extends base_1.BaseAPI {
    /**
     * Creates a new attribute for the User resource.
     * @summary Create User Attribute
     * @param {UserAttributesApiCreateUserAttributeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAttributesApi
     */
    createUserAttribute(requestParameters, options) {
        return exports.UserAttributesApiFp(this.configuration)
            .createUserAttribute(requestParameters.projId, requestParameters.envId, requestParameters.resourceAttributeCreate, requestParameters.resourceId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes the attribute and all its related data.  Note: If the attribute is used by policies, removing it will cause the attribute to evaluate as `undefined`.
     * @summary Delete User Attribute
     * @param {UserAttributesApiDeleteUserAttributeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAttributesApi
     */
    deleteUserAttribute(requestParameters, options) {
        return exports.UserAttributesApiFp(this.configuration)
            .deleteUserAttribute(requestParameters.projId, requestParameters.envId, requestParameters.attributeId, requestParameters.resourceId, requestParameters.page, requestParameters.perPage, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gets a single attribute defined on the User resource, if such attribute exists.
     * @summary Get User Attribute
     * @param {UserAttributesApiGetUserAttributeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAttributesApi
     */
    getUserAttribute(requestParameters, options) {
        return exports.UserAttributesApiFp(this.configuration)
            .getUserAttribute(requestParameters.projId, requestParameters.envId, requestParameters.attributeId, requestParameters.resourceId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists all the attributes defined on the User resource.
     * @summary List User Attributes
     * @param {UserAttributesApiListUserAttributesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAttributesApi
     */
    listUserAttributes(requestParameters, options) {
        return exports.UserAttributesApiFp(this.configuration)
            .listUserAttributes(requestParameters.projId, requestParameters.envId, requestParameters.resourceId, requestParameters.page, requestParameters.perPage, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Partially updates the attribute defined on the User resource. Fields that will be provided will be completely overwritten.
     * @summary Update User Attribute
     * @param {UserAttributesApiUpdateUserAttributeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAttributesApi
     */
    updateUserAttribute(requestParameters, options) {
        return exports.UserAttributesApiFp(this.configuration)
            .updateUserAttribute(requestParameters.projId, requestParameters.envId, requestParameters.attributeId, requestParameters.resourceAttributeUpdate, requestParameters.resourceId, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.UserAttributesApi = UserAttributesApi;
//# sourceMappingURL=data:application/json;base64,