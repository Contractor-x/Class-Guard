"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EnvironmentsApi = exports.EnvironmentsApiFactory = exports.EnvironmentsApiFp = exports.EnvironmentsApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * EnvironmentsApi - axios parameter creator
 * @export
 */
exports.EnvironmentsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Creates a new environment under a given project.
         * @summary Create Environment
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {EnvironmentCreate} environmentCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEnvironment: async (projId, environmentCreate, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            common_1.assertParamExists('createEnvironment', 'projId', projId);
            // verify required parameter 'environmentCreate' is not null or undefined
            common_1.assertParamExists('createEnvironment', 'environmentCreate', environmentCreate);
            const localVarPath = `/v2/projects/{proj_id}/envs`.replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(environmentCreate, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes an environment and all its related data.
         * @summary Delete Environment
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEnvironment: async (projId, envId, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            common_1.assertParamExists('deleteEnvironment', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            common_1.assertParamExists('deleteEnvironment', 'envId', envId);
            const localVarPath = `/v2/projects/{proj_id}/envs/{env_id}`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a single environment matching the given env_id, if such environment exists.
         * @summary Get Environment
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnvironment: async (projId, envId, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            common_1.assertParamExists('getEnvironment', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            common_1.assertParamExists('getEnvironment', 'envId', envId);
            const localVarPath = `/v2/projects/{proj_id}/envs/{env_id}`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists all the environments under a given project.
         * @summary List Environments
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEnvironments: async (projId, page, perPage, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            common_1.assertParamExists('listEnvironments', 'projId', projId);
            const localVarPath = `/v2/projects/{proj_id}/envs`.replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Stats Environments
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statsEnvironments: async (projId, envId, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            common_1.assertParamExists('statsEnvironments', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            common_1.assertParamExists('statsEnvironments', 'envId', envId);
            const localVarPath = `/v2/projects/{proj_id}/envs/{env_id}/stats`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the environment.
         * @summary Update Environment
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {EnvironmentUpdate} environmentUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEnvironment: async (projId, envId, environmentUpdate, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            common_1.assertParamExists('updateEnvironment', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            common_1.assertParamExists('updateEnvironment', 'envId', envId);
            // verify required parameter 'environmentUpdate' is not null or undefined
            common_1.assertParamExists('updateEnvironment', 'environmentUpdate', environmentUpdate);
            const localVarPath = `/v2/projects/{proj_id}/envs/{env_id}`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(environmentUpdate, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * EnvironmentsApi - functional programming interface
 * @export
 */
exports.EnvironmentsApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.EnvironmentsApiAxiosParamCreator(configuration);
    return {
        /**
         * Creates a new environment under a given project.
         * @summary Create Environment
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {EnvironmentCreate} environmentCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEnvironment(projId, environmentCreate, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEnvironment(projId, environmentCreate, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Deletes an environment and all its related data.
         * @summary Delete Environment
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEnvironment(projId, envId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEnvironment(projId, envId, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Gets a single environment matching the given env_id, if such environment exists.
         * @summary Get Environment
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEnvironment(projId, envId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEnvironment(projId, envId, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Lists all the environments under a given project.
         * @summary List Environments
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listEnvironments(projId, page, perPage, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listEnvironments(projId, page, perPage, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Stats Environments
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async statsEnvironments(projId, envId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.statsEnvironments(projId, envId, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Updates the environment.
         * @summary Update Environment
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {EnvironmentUpdate} environmentUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEnvironment(projId, envId, environmentUpdate, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEnvironment(projId, envId, environmentUpdate, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
    };
};
/**
 * EnvironmentsApi - factory interface
 * @export
 */
exports.EnvironmentsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.EnvironmentsApiFp(configuration);
    return {
        /**
         * Creates a new environment under a given project.
         * @summary Create Environment
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {EnvironmentCreate} environmentCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEnvironment(projId, environmentCreate, options) {
            return localVarFp
                .createEnvironment(projId, environmentCreate, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Deletes an environment and all its related data.
         * @summary Delete Environment
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEnvironment(projId, envId, options) {
            return localVarFp
                .deleteEnvironment(projId, envId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Gets a single environment matching the given env_id, if such environment exists.
         * @summary Get Environment
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnvironment(projId, envId, options) {
            return localVarFp
                .getEnvironment(projId, envId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Lists all the environments under a given project.
         * @summary List Environments
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEnvironments(projId, page, perPage, options) {
            return localVarFp
                .listEnvironments(projId, page, perPage, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Stats Environments
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statsEnvironments(projId, envId, options) {
            return localVarFp
                .statsEnvironments(projId, envId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Updates the environment.
         * @summary Update Environment
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {EnvironmentUpdate} environmentUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEnvironment(projId, envId, environmentUpdate, options) {
            return localVarFp
                .updateEnvironment(projId, envId, environmentUpdate, options)
                .then((request) => request(axios, basePath));
        },
    };
};
/**
 * EnvironmentsApi - object-oriented interface
 * @export
 * @class EnvironmentsApi
 * @extends {BaseAPI}
 */
class EnvironmentsApi extends base_1.BaseAPI {
    /**
     * Creates a new environment under a given project.
     * @summary Create Environment
     * @param {EnvironmentsApiCreateEnvironmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentsApi
     */
    createEnvironment(requestParameters, options) {
        return exports.EnvironmentsApiFp(this.configuration)
            .createEnvironment(requestParameters.projId, requestParameters.environmentCreate, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes an environment and all its related data.
     * @summary Delete Environment
     * @param {EnvironmentsApiDeleteEnvironmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentsApi
     */
    deleteEnvironment(requestParameters, options) {
        return exports.EnvironmentsApiFp(this.configuration)
            .deleteEnvironment(requestParameters.projId, requestParameters.envId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gets a single environment matching the given env_id, if such environment exists.
     * @summary Get Environment
     * @param {EnvironmentsApiGetEnvironmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentsApi
     */
    getEnvironment(requestParameters, options) {
        return exports.EnvironmentsApiFp(this.configuration)
            .getEnvironment(requestParameters.projId, requestParameters.envId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists all the environments under a given project.
     * @summary List Environments
     * @param {EnvironmentsApiListEnvironmentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentsApi
     */
    listEnvironments(requestParameters, options) {
        return exports.EnvironmentsApiFp(this.configuration)
            .listEnvironments(requestParameters.projId, requestParameters.page, requestParameters.perPage, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Stats Environments
     * @param {EnvironmentsApiStatsEnvironmentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentsApi
     */
    statsEnvironments(requestParameters, options) {
        return exports.EnvironmentsApiFp(this.configuration)
            .statsEnvironments(requestParameters.projId, requestParameters.envId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates the environment.
     * @summary Update Environment
     * @param {EnvironmentsApiUpdateEnvironmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentsApi
     */
    updateEnvironment(requestParameters, options) {
        return exports.EnvironmentsApiFp(this.configuration)
            .updateEnvironment(requestParameters.projId, requestParameters.envId, requestParameters.environmentUpdate, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.EnvironmentsApi = EnvironmentsApi;
//# sourceMappingURL=data:application/json;base64,