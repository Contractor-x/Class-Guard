/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { ConditionSetCreate } from '../types';
import { ConditionSetRead } from '../types';
import { ConditionSetType } from '../types';
import { ConditionSetUpdate } from '../types';
/**
 * ConditionSetsApi - axios parameter creator
 * @export
 */
export declare const ConditionSetsApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Creates a new condition set (can be either a user set or a resource set).
     * @summary Create Condition Set
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {ConditionSetCreate} conditionSetCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConditionSet: (projId: string, envId: string, conditionSetCreate: ConditionSetCreate, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes a condition set and all its related data. This includes any permissions granted to said condition set (i.e: any matching condition set rules).
     * @summary Delete Condition Set
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} conditionSetId Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteConditionSet: (projId: string, envId: string, conditionSetId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets a single condition set, if such condition set exists.
     * @summary Get Condition Set
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} conditionSetId Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConditionSet: (projId: string, envId: string, conditionSetId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Lists all condition sets matching a filter.
     * @summary List Condition Sets
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {ConditionSetType} [type] if provided, will return only the condition sets of the specified type. e.g: only user sets.
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listConditionSets: (projId: string, envId: string, type?: "userset" | "resourceset" | undefined, page?: number | undefined, perPage?: number | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Partially updates a condition set. Fields that will be provided will be completely overwritten.
     * @summary Update Condition Set
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} conditionSetId Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \&quot;slug\&quot;).
     * @param {ConditionSetUpdate} conditionSetUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateConditionSet: (projId: string, envId: string, conditionSetId: string, conditionSetUpdate: ConditionSetUpdate, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ConditionSetsApi - functional programming interface
 * @export
 */
export declare const ConditionSetsApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Creates a new condition set (can be either a user set or a resource set).
     * @summary Create Condition Set
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {ConditionSetCreate} conditionSetCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConditionSet(projId: string, envId: string, conditionSetCreate: ConditionSetCreate, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ConditionSetRead>>;
    /**
     * Deletes a condition set and all its related data. This includes any permissions granted to said condition set (i.e: any matching condition set rules).
     * @summary Delete Condition Set
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} conditionSetId Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteConditionSet(projId: string, envId: string, conditionSetId: string, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * Gets a single condition set, if such condition set exists.
     * @summary Get Condition Set
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} conditionSetId Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConditionSet(projId: string, envId: string, conditionSetId: string, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ConditionSetRead>>;
    /**
     * Lists all condition sets matching a filter.
     * @summary List Condition Sets
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {ConditionSetType} [type] if provided, will return only the condition sets of the specified type. e.g: only user sets.
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listConditionSets(projId: string, envId: string, type?: "userset" | "resourceset" | undefined, page?: number | undefined, perPage?: number | undefined, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Array<ConditionSetRead>>>;
    /**
     * Partially updates a condition set. Fields that will be provided will be completely overwritten.
     * @summary Update Condition Set
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} conditionSetId Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \&quot;slug\&quot;).
     * @param {ConditionSetUpdate} conditionSetUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateConditionSet(projId: string, envId: string, conditionSetId: string, conditionSetUpdate: ConditionSetUpdate, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ConditionSetRead>>;
};
/**
 * ConditionSetsApi - factory interface
 * @export
 */
export declare const ConditionSetsApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Creates a new condition set (can be either a user set or a resource set).
     * @summary Create Condition Set
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {ConditionSetCreate} conditionSetCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConditionSet(projId: string, envId: string, conditionSetCreate: ConditionSetCreate, options?: any): AxiosPromise<ConditionSetRead>;
    /**
     * Deletes a condition set and all its related data. This includes any permissions granted to said condition set (i.e: any matching condition set rules).
     * @summary Delete Condition Set
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} conditionSetId Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteConditionSet(projId: string, envId: string, conditionSetId: string, options?: any): AxiosPromise<void>;
    /**
     * Gets a single condition set, if such condition set exists.
     * @summary Get Condition Set
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} conditionSetId Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConditionSet(projId: string, envId: string, conditionSetId: string, options?: any): AxiosPromise<ConditionSetRead>;
    /**
     * Lists all condition sets matching a filter.
     * @summary List Condition Sets
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {ConditionSetType} [type] if provided, will return only the condition sets of the specified type. e.g: only user sets.
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listConditionSets(projId: string, envId: string, type?: "userset" | "resourceset" | undefined, page?: number | undefined, perPage?: number | undefined, options?: any): AxiosPromise<Array<ConditionSetRead>>;
    /**
     * Partially updates a condition set. Fields that will be provided will be completely overwritten.
     * @summary Update Condition Set
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} conditionSetId Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \&quot;slug\&quot;).
     * @param {ConditionSetUpdate} conditionSetUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateConditionSet(projId: string, envId: string, conditionSetId: string, conditionSetUpdate: ConditionSetUpdate, options?: any): AxiosPromise<ConditionSetRead>;
};
/**
 * Request parameters for createConditionSet operation in ConditionSetsApi.
 * @export
 * @interface ConditionSetsApiCreateConditionSetRequest
 */
export interface ConditionSetsApiCreateConditionSetRequest {
    /**
     * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ConditionSetsApiCreateConditionSet
     */
    readonly projId: string;
    /**
     * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ConditionSetsApiCreateConditionSet
     */
    readonly envId: string;
    /**
     *
     * @type {ConditionSetCreate}
     * @memberof ConditionSetsApiCreateConditionSet
     */
    readonly conditionSetCreate: ConditionSetCreate;
}
/**
 * Request parameters for deleteConditionSet operation in ConditionSetsApi.
 * @export
 * @interface ConditionSetsApiDeleteConditionSetRequest
 */
export interface ConditionSetsApiDeleteConditionSetRequest {
    /**
     * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ConditionSetsApiDeleteConditionSet
     */
    readonly projId: string;
    /**
     * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ConditionSetsApiDeleteConditionSet
     */
    readonly envId: string;
    /**
     * Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ConditionSetsApiDeleteConditionSet
     */
    readonly conditionSetId: string;
}
/**
 * Request parameters for getConditionSet operation in ConditionSetsApi.
 * @export
 * @interface ConditionSetsApiGetConditionSetRequest
 */
export interface ConditionSetsApiGetConditionSetRequest {
    /**
     * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ConditionSetsApiGetConditionSet
     */
    readonly projId: string;
    /**
     * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ConditionSetsApiGetConditionSet
     */
    readonly envId: string;
    /**
     * Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ConditionSetsApiGetConditionSet
     */
    readonly conditionSetId: string;
}
/**
 * Request parameters for listConditionSets operation in ConditionSetsApi.
 * @export
 * @interface ConditionSetsApiListConditionSetsRequest
 */
export interface ConditionSetsApiListConditionSetsRequest {
    /**
     * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ConditionSetsApiListConditionSets
     */
    readonly projId: string;
    /**
     * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ConditionSetsApiListConditionSets
     */
    readonly envId: string;
    /**
     * if provided, will return only the condition sets of the specified type. e.g: only user sets.
     * @type {ConditionSetType}
     * @memberof ConditionSetsApiListConditionSets
     */
    readonly type?: ConditionSetType;
    /**
     * Page number of the results to fetch, starting at 1.
     * @type {number}
     * @memberof ConditionSetsApiListConditionSets
     */
    readonly page?: number;
    /**
     * The number of results per page (max 100).
     * @type {number}
     * @memberof ConditionSetsApiListConditionSets
     */
    readonly perPage?: number;
}
/**
 * Request parameters for updateConditionSet operation in ConditionSetsApi.
 * @export
 * @interface ConditionSetsApiUpdateConditionSetRequest
 */
export interface ConditionSetsApiUpdateConditionSetRequest {
    /**
     * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ConditionSetsApiUpdateConditionSet
     */
    readonly projId: string;
    /**
     * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ConditionSetsApiUpdateConditionSet
     */
    readonly envId: string;
    /**
     * Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ConditionSetsApiUpdateConditionSet
     */
    readonly conditionSetId: string;
    /**
     *
     * @type {ConditionSetUpdate}
     * @memberof ConditionSetsApiUpdateConditionSet
     */
    readonly conditionSetUpdate: ConditionSetUpdate;
}
/**
 * ConditionSetsApi - object-oriented interface
 * @export
 * @class ConditionSetsApi
 * @extends {BaseAPI}
 */
export declare class ConditionSetsApi extends BaseAPI {
    /**
     * Creates a new condition set (can be either a user set or a resource set).
     * @summary Create Condition Set
     * @param {ConditionSetsApiCreateConditionSetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConditionSetsApi
     */
    createConditionSet(requestParameters: ConditionSetsApiCreateConditionSetRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ConditionSetRead>>;
    /**
     * Deletes a condition set and all its related data. This includes any permissions granted to said condition set (i.e: any matching condition set rules).
     * @summary Delete Condition Set
     * @param {ConditionSetsApiDeleteConditionSetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConditionSetsApi
     */
    deleteConditionSet(requestParameters: ConditionSetsApiDeleteConditionSetRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Gets a single condition set, if such condition set exists.
     * @summary Get Condition Set
     * @param {ConditionSetsApiGetConditionSetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConditionSetsApi
     */
    getConditionSet(requestParameters: ConditionSetsApiGetConditionSetRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ConditionSetRead>>;
    /**
     * Lists all condition sets matching a filter.
     * @summary List Condition Sets
     * @param {ConditionSetsApiListConditionSetsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConditionSetsApi
     */
    listConditionSets(requestParameters: ConditionSetsApiListConditionSetsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ConditionSetRead[]>>;
    /**
     * Partially updates a condition set. Fields that will be provided will be completely overwritten.
     * @summary Update Condition Set
     * @param {ConditionSetsApiUpdateConditionSetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConditionSetsApi
     */
    updateConditionSet(requestParameters: ConditionSetsApiUpdateConditionSetRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ConditionSetRead>>;
}
