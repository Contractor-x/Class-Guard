import axios from 'axios';
import { ContextStore } from '../utils/context';
const RESOURCE_DELIMITER = ':';
function isString(x) {
    return typeof x === 'string';
}
export class PermitError extends Error {
    constructor(message) {
        super(message);
        this.name = 'PermitError';
    }
}
export class PermitConnectionError extends PermitError {
    constructor(message) {
        super(message);
        this.name = 'PermitConnectionError';
    }
}
export class PermitPDPStatusError extends PermitError {
    constructor(message) {
        super(message);
        this.name = 'PermitPDPStatusError';
    }
}
/**
 * this client is dealing with evaluation of check() queries.
 */
export class Enforcer {
    constructor(config, logger) {
        this.config = config;
        this.logger = logger;
        this.client = axios.create({
            baseURL: `${this.config.pdp}/`,
        });
        this.logger = logger;
        this.contextStore = new ContextStore();
    }
    /**
     * Usage:
     *
     * // with (resource, action):
     * const user = { key: 'UNIQUE_USER_ID' };
     * permit.check(user, 'get', {'type': 'task', 'key': '23'})
     * permit.check(user, 'get', {'type': 'task'})
     *
     * // with (url, method):
     * const { resource, action } = permit.getUrlContext('/lists/3/todos/37', 'GET');
     * permit.check(user, action, resource)
     *
     * @param user
     * @param action
     * @param resource
     * @param context
     * @param config
     *
     * @returns whether or not action is permitted for given user
     */
    async check(user, action, resource, context = {}, // context provided specifically for this query
    config = {}) {
        return await this.checkWithExceptions(user, action, resource, context, config).catch((err) => {
            const shouldThrow = config.throwOnError === undefined ? this.config.throwOnError : config.throwOnError;
            if (shouldThrow) {
                throw err;
            }
            else {
                this.logger.error(err);
                return false;
            }
        });
    }
    async checkWithExceptions(user, action, resource, context = {}, // context provided specifically for this query
    config = {}) {
        const normalizedUser = isString(user) ? { key: user } : user;
        const checkTimeout = config.timeout || this.config.timeout;
        const resourceObj = isString(resource) ? Enforcer.resourceFromString(resource) : resource;
        const normalizedResource = this.normalizeResource(resourceObj);
        const queryContext = this.contextStore.getDerivedContext(context);
        const input = {
            user: normalizedUser,
            action: action,
            resource: normalizedResource,
            context: queryContext,
        };
        return await this.client
            .post('allowed', input, {
            headers: {
                Authorization: `Bearer ${this.config.token}`,
            },
            timeout: checkTimeout,
        })
            .then((response) => {
            if (response.status !== 200) {
                throw new PermitPDPStatusError(`Permit.check() got an unexpected status code: ${response.status}, please check your SDK init and make sure the PDP sidecar is configured correctly. \n\
            Read more about setting up the PDP at https://docs.permit.io`);
            }
            const decision = ('allow' in response.data ? response.data.allow : response.data.result.allow) || false;
            this.logger.info(`permit.check(${Enforcer.userRepr(normalizedUser)}, ${action}, ${Enforcer.resourceRepr(resourceObj)}) = ${decision}`);
            return decision;
        })
            .catch((error) => {
            const errorMessage = `Error in permit.check(${Enforcer.userRepr(normalizedUser)}, ${action}, ${Enforcer.resourceRepr(resourceObj)})`;
            if (axios.isAxiosError(error)) {
                const errorStatusCode = error.response?.status.toString() || '';
                const errorDetails = error?.response?.data
                    ? JSON.stringify(error.response.data)
                    : error.message;
                this.logger.error(`[${errorStatusCode}] ${errorMessage}, err: ${errorDetails}`);
            }
            else {
                this.logger.error(`${errorMessage}\n${error}`);
            }
            throw new PermitConnectionError(`Permit SDK got error: \n ${error.message} \n
          and cannot connect to the PDP, please check your configuration and make sure the PDP is running at ${this.config.pdp} and accepting requests. \n
          Read more about setting up the PDP at https://docs.permit.io`);
        });
    }
    // TODO: remove this eventually, once we decide on finalized structure of AuthzQuery
    normalizeResource(resource) {
        const normalizedResource = Object.assign({}, resource);
        // if tenant is empty, we might auto-set the default tenant according to config
        if (!normalizedResource.tenant && this.config.multiTenancy.useDefaultTenantIfEmpty) {
            normalizedResource.tenant = this.config.multiTenancy.defaultTenant;
        }
        return normalizedResource;
    }
    static userRepr(user) {
        if (user.attributes || user.email) {
            return JSON.stringify(user);
        }
        return user.key;
    }
    static resourceRepr(resource) {
        if (resource.attributes && resource.attributes.length > 0) {
            return JSON.stringify(resource);
        }
        let resourceRepr = '';
        if (resource.tenant) {
            resourceRepr += `${resource.tenant}/`;
        }
        resourceRepr += `${resource.type}:${resource.key ?? '*'}`;
        return resourceRepr;
    }
    static resourceFromString(resource) {
        const parts = resource.split(RESOURCE_DELIMITER);
        if (parts.length < 1 || parts.length > 2) {
            throw Error(`permit.check() got invalid resource string: '${resource}'`);
        }
        return {
            type: parts[0],
            key: parts.length > 1 ? parts[1] : undefined,
        };
    }
    getMethods() {
        return {
            check: this.check.bind(this),
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW5mb3JjZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZW5mb3JjZW1lbnQvZW5mb3JjZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxLQUF3QixNQUFNLE9BQU8sQ0FBQztBQUk3QyxPQUFPLEVBQXdCLFlBQVksRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBSXRFLE1BQU0sa0JBQWtCLEdBQUcsR0FBRyxDQUFDO0FBRS9CLFNBQVMsUUFBUSxDQUFDLENBQU07SUFDdEIsT0FBTyxPQUFPLENBQUMsS0FBSyxRQUFRLENBQUM7QUFDL0IsQ0FBQztBQUVELE1BQU0sT0FBTyxXQUFZLFNBQVEsS0FBSztJQUNwQyxZQUFZLE9BQWU7UUFDekIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2YsSUFBSSxDQUFDLElBQUksR0FBRyxhQUFhLENBQUM7SUFDNUIsQ0FBQztDQUNGO0FBQ0QsTUFBTSxPQUFPLHFCQUFzQixTQUFRLFdBQVc7SUFDcEQsWUFBWSxPQUFlO1FBQ3pCLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNmLElBQUksQ0FBQyxJQUFJLEdBQUcsdUJBQXVCLENBQUM7SUFDdEMsQ0FBQztDQUNGO0FBQ0QsTUFBTSxPQUFPLG9CQUFxQixTQUFRLFdBQVc7SUFDbkQsWUFBWSxPQUFlO1FBQ3pCLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNmLElBQUksQ0FBQyxJQUFJLEdBQUcsc0JBQXNCLENBQUM7SUFDckMsQ0FBQztDQUNGO0FBWUQ7O0dBRUc7QUFDSCxNQUFNLE9BQU8sUUFBUTtJQUluQixZQUFvQixNQUFxQixFQUFVLE1BQWM7UUFBN0MsV0FBTSxHQUFOLE1BQU0sQ0FBZTtRQUFVLFdBQU0sR0FBTixNQUFNLENBQVE7UUFDL0QsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDO1lBQ3pCLE9BQU8sRUFBRSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxH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