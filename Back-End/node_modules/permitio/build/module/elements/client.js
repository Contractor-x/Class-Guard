import axios from 'axios';
import { AuthenticationApi, Configuration } from '../openapi';
export var ElementsApiErrors;
(function (ElementsApiErrors) {
    ElementsApiErrors["USER_NOT_FOUND"] = "User not found";
    ElementsApiErrors["TENANT_NOT_FOUND"] = "Tenant not found";
    ElementsApiErrors["INVALID_PERMISSION_LEVEL"] = "Invalid user permission level";
    ElementsApiErrors["FORBIDDEN_ACCESS"] = "Forbidden access";
})(ElementsApiErrors || (ElementsApiErrors = {}));
export class ElementsClient {
    constructor(config, logger) {
        this.config = config;
        this.logger = logger;
        const axiosClientConfig = new Configuration({
            basePath: `${this.config.apiUrl}`,
            accessToken: this.config.token,
        });
        this.authApi = new AuthenticationApi(axiosClientConfig);
    }
    async loginAs({ userId, tenantId, }) {
        try {
            const response = await this.authApi.elementsLoginAs({
                userLoginRequestInput: {
                    user_id: userId,
                    tenant_id: tenantId,
                },
            });
            this.logger.debug(`[${response.status}] permit.api.loginAs(${userId})`);
            const res = response.data;
            res['content'] = { url: response.data.redirect_url };
            return res;
        }
        catch (err) {
            if (axios.isAxiosError(err)) {
                this.logger.error(`[${err?.response?.status}] permit.api.loginAs(${userId}), err: ${JSON.stringify(err?.response?.data)}`);
            }
            throw err;
        }
    }
    get elements() {
        return {
            loginAs: this.loginAs.bind(this),
        };
    }
    getMethods() {
        return {
            elements: this.elements,
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2VsZW1lbnRzL2NsaWVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssTUFBTSxPQUFPLENBQUM7QUFJMUIsT0FBTyxFQUFFLGlCQUFpQixFQUFFLGFBQWEsRUFBOEIsTUFBTSxZQUFZLENBQUM7QUFVMUYsTUFBTSxDQUFOLElBQVksaUJBS1g7QUFMRCxXQUFZLGlCQUFpQjtJQUMzQixzREFBaUMsQ0FBQTtJQUNqQywwREFBcUMsQ0FBQTtJQUNyQywrRUFBMEQsQ0FBQTtJQUMxRCwwREFBcUMsQ0FBQTtBQUN2QyxDQUFDLEVBTFcsaUJBQWlCLEtBQWpCLGlCQUFpQixRQUs1QjtBQVdELE1BQU0sT0FBTyxjQUFjO0lBR3pCLFlBQW9CLE1BQXFCLEVBQVUsTUFBYztRQUE3QyxXQUFNLEdBQU4sTUFBTSxDQUFlO1FBQVUsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUMvRCxNQUFNLGlCQUFpQixHQUFHLElBQUksYUFBYSxDQUFDO1lBQzFDLFFBQVEsRUFBRSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFO1lBQ2pDLFdBQVcsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUs7U0FDL0IsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLGlCQUFpQixDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFDMUQsQ0FBQztJQUVNLEtBQUssQ0FBQyxPQUFPLENBQUMsRUFDbkIsTUFBTSxFQUNOLFFBQVEsR0FDTTtRQUNkLElBQUk7WUFDRixNQUFNLFFBQVEsR0FBRyxNQUFNLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDO2dCQUNsRCxxQkFBcUIsRUFBRTtvQkFDckIsT0FBTyxFQUFFLE1BQU07b0JBQ2YsU0FBUyxFQUFFLFFBQVE7aUJBQ3BCO2FBQ0YsQ0FBQyxDQUFDO1lBQ0gsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxRQUFRLENBQUMsTUFBTSx3QkFBd0IsTUFBTSxHQUFHLENBQUMsQ0FBQztZQUN4RSxNQUFNLEdBQUcsR0FBMEMsUUFBUSxDQUFDLElBQUksQ0FBQztZQUNqRSxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsUUFBUSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztZQUNyRCxPQUFPLEdBQUcsQ0FBQztTQUNaO1FBQUMsT0FBTyxHQUFHLEVBQUU7WUFDWixJQUFJLEtBQUssQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLEVBQUU7Z0JBQzNCLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUNmLElBQUksR0FBRyxFQUFFLFFBQVEsRUFBRSxNQUFNLHdCQUF3QixNQUFNLFdBQVcsSUFBSSxDQUFDLFNBQVMsQ0FDOUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQ3BCLEVBQUUsQ0FDSixDQUFDO2FBQ0g7WUFDRCxNQUFNLEdBQUcsQ0FBQztTQUNYO0lBQ0gsQ0FBQztJQUVELElBQVcsUUFBUTtRQUNqQixPQUFPO1lBQ0wsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztTQUNqQyxDQUFDO0lBQ0osQ0FBQztJQUVNLFVBQVU7UUFDZixPQUFPO1lBQ0wsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRO1NBQ3hCLENBQUM7SUFDSixDQUFDO0NBQ0YifQ==