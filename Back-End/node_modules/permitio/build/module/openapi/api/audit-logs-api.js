/* tslint:disable */
/* eslint-disable */
/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setBearerAuthToObject, setSearchParams, toPathString, createRequestFunction, } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI } from '../base';
/**
 * AuditLogsApi - axios parameter creator
 * @export
 */
export const AuditLogsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary List Audit Logs
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} [pdpId] Filter by pdp config id
         * @param {Array<string>} [users] List of user keys or emails to filter by
         * @param {boolean} [decision] Filter by decision result
         * @param {Array<string>} [resources] Filter by resources
         * @param {string} [tenant] Filter by tenant
         * @param {string} [action] Filter by action
         * @param {number} [timestampFrom] Filter by timestamp from
         * @param {number} [timestampTo] Filter by timestamp to
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuditLogs: async (projId, envId, pdpId, users, decision, resources, tenant, action, timestampFrom, timestampTo, page, perPage, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('listAuditLogs', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('listAuditLogs', 'envId', envId);
            const localVarPath = `/v2/pdps/{proj_id}/{env_id}/audit_logs`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (pdpId !== undefined) {
                localVarQueryParameter['pdp_id'] = pdpId;
            }
            if (users) {
                localVarQueryParameter['users'] = users;
            }
            if (decision !== undefined) {
                localVarQueryParameter['decision'] = decision;
            }
            if (resources) {
                localVarQueryParameter['resources'] = resources;
            }
            if (tenant !== undefined) {
                localVarQueryParameter['tenant'] = tenant;
            }
            if (action !== undefined) {
                localVarQueryParameter['action'] = action;
            }
            if (timestampFrom !== undefined) {
                localVarQueryParameter['timestamp_from'] = timestampFrom;
            }
            if (timestampTo !== undefined) {
                localVarQueryParameter['timestamp_to'] = timestampTo;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * AuditLogsApi - functional programming interface
 * @export
 */
export const AuditLogsApiFp = function (configuration) {
    const localVarAxiosParamCreator = AuditLogsApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary List Audit Logs
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} [pdpId] Filter by pdp config id
         * @param {Array<string>} [users] List of user keys or emails to filter by
         * @param {boolean} [decision] Filter by decision result
         * @param {Array<string>} [resources] Filter by resources
         * @param {string} [tenant] Filter by tenant
         * @param {string} [action] Filter by action
         * @param {number} [timestampFrom] Filter by timestamp from
         * @param {number} [timestampTo] Filter by timestamp to
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAuditLogs(projId, envId, pdpId, users, decision, resources, tenant, action, timestampFrom, timestampTo, page, perPage, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAuditLogs(projId, envId, pdpId, users, decision, resources, tenant, action, timestampFrom, timestampTo, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};
/**
 * AuditLogsApi - factory interface
 * @export
 */
export const AuditLogsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = AuditLogsApiFp(configuration);
    return {
        /**
         *
         * @summary List Audit Logs
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} [pdpId] Filter by pdp config id
         * @param {Array<string>} [users] List of user keys or emails to filter by
         * @param {boolean} [decision] Filter by decision result
         * @param {Array<string>} [resources] Filter by resources
         * @param {string} [tenant] Filter by tenant
         * @param {string} [action] Filter by action
         * @param {number} [timestampFrom] Filter by timestamp from
         * @param {number} [timestampTo] Filter by timestamp to
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuditLogs(projId, envId, pdpId, users, decision, resources, tenant, action, timestampFrom, timestampTo, page, perPage, options) {
            return localVarFp
                .listAuditLogs(projId, envId, pdpId, users, decision, resources, tenant, action, timestampFrom, timestampTo, page, perPage, options)
                .then((request) => request(axios, basePath));
        },
    };
};
/**
 * AuditLogsApi - object-oriented interface
 * @export
 * @class AuditLogsApi
 * @extends {BaseAPI}
 */
export class AuditLogsApi extends BaseAPI {
    /**
     *
     * @summary List Audit Logs
     * @param {AuditLogsApiListAuditLogsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditLogsApi
     */
    listAuditLogs(requestParameters, options) {
        return AuditLogsApiFp(this.configuration)
            .listAuditLogs(requestParameters.projId, requestParameters.envId, requestParameters.pdpId, requestParameters.users, requestParameters.decision, requestParameters.resources, requestParameters.tenant, requestParameters.action, requestParameters.timestampFrom, requestParameters.timestampTo, requestParameters.page, requestParameters.perPage, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXVkaXQtbG9ncy1hcGkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvb3BlbmFwaS9hcGkvYXVkaXQtbG9ncy1hcGkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLG9CQUFvQjtBQUNwQjs7Ozs7Ozs7OztHQVVHO0FBRUgsT0FBTyxXQUFnRSxNQUFNLE9BQU8sQ0FBQztBQUVyRix5REFBeUQ7QUFDekQsYUFBYTtBQUNiLE9BQU8sRUFDTCxjQUFjLEVBQ2QsaUJBQWlCLEVBR2pCLHFCQUFxQixFQUVyQixlQUFlLEVBRWYsWUFBWSxFQUNaLHFCQUFxQixHQUN0QixNQUFNLFdBQVcsQ0FBQztBQUNuQixhQUFhO0FBQ2IsT0FBTyxFQUFFLFNBQVMsRUFBbUMsT0FBTyxFQUFpQixNQUFNLFNBQVMsQ0FBQztBQUs3Rjs7O0dBR0c7QUFDSCxNQUFNLENBQUMsTUFBTSw2QkFBNkIsR0FBRyxVQUFVLGFBQTZCO0lBQ2xGLE9BQU87UUFDTDs7Ozs7Ozs7Ozs7Ozs7Ozs7V0FpQkc7UUFDSCxhQUFhLEVBQUUsS0FBSyxFQUNsQixNQUFjLEVBQ2QsS0FBYSxFQUNiLEtBQWMsRUFDZCxLQUFxQixFQUNyQixRQUFrQixFQUNsQixTQUF5QixFQUN6QixNQUFlLEVBQ2YsTUFBZSxFQUNmLGFBQXNCLEVBQ3RCLFdBQW9CLEVBQ3BCLElBQWEsRUFDYixPQUFnQixFQUNoQixVQUE4QixFQUFFLEVBQ1YsRUFBRTtZQUN4Qiw4REFBOEQ7WUFDOUQsaUJBQWlCLENBQUMsZUFBZSxFQUFFLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztZQUNyRCw2REFBNkQ7WUFDN0QsaUJBQWlCLENBQUMsZUFBZSxFQUFFLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztZQUNuRCxNQUFNLFlBQVksR0FBRyx3Q0FBd0M7aUJBQzFELE9BQU8sQ0FBQyxJQUFJLFNBQVMsR0FBRyxFQUFFLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxNQUFNLENB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