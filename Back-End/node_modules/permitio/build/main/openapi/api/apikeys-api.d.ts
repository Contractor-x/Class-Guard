/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { APIKeyCreate } from '../types';
import { APIKeyRead } from '../types';
import { APIKeyScopeRead } from '../types';
import { PaginatedResultAPIKeyRead } from '../types';
/**
 * APIKeysApi - axios parameter creator
 * @export
 */
export declare const APIKeysApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Creates a new api_key under the active organization.
     * @summary Create Api Key
     * @param {APIKeyCreate} aPIKeyCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createApiKey: (aPIKeyCreate: APIKeyCreate, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes the api_key and all its related data.
     * @summary Delete Api Key
     * @param {string} apiKeyId The unique id of the API key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteApiKey: (apiKeyId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets a single api_key matching the given api_key_id, if such api_key exists.
     * @summary Get Api Key
     * @param {string} apiKeyId The unique id of the API key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getApiKey: (apiKeyId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Api Key Scope
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getApiKeyScope: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Environment Api Key
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEnvironmentApiKey: (projId: string, envId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Lists all the api_keys under the active organization.
     * @summary List Api Keys
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listApiKeys: (page?: number | undefined, perPage?: number | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * APIKeysApi - functional programming interface
 * @export
 */
export declare const APIKeysApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Creates a new api_key under the active organization.
     * @summary Create Api Key
     * @param {APIKeyCreate} aPIKeyCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createApiKey(aPIKeyCreate: APIKeyCreate, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<APIKeyRead>>;
    /**
     * Deletes the api_key and all its related data.
     * @summary Delete Api Key
     * @param {string} apiKeyId The unique id of the API key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteApiKey(apiKeyId: string, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * Gets a single api_key matching the given api_key_id, if such api_key exists.
     * @summary Get Api Key
     * @param {string} apiKeyId The unique id of the API key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getApiKey(apiKeyId: string, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<APIKeyRead>>;
    /**
     *
     * @summary Get Api Key Scope
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getApiKeyScope(options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<APIKeyScopeRead>>;
    /**
     *
     * @summary Get Environment Api Key
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEnvironmentApiKey(projId: string, envId: string, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<APIKeyRead>>;
    /**
     * Lists all the api_keys under the active organization.
     * @summary List Api Keys
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listApiKeys(page?: number | undefined, perPage?: number | undefined, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<PaginatedResultAPIKeyRead>>;
};
/**
 * APIKeysApi - factory interface
 * @export
 */
export declare const APIKeysApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Creates a new api_key under the active organization.
     * @summary Create Api Key
     * @param {APIKeyCreate} aPIKeyCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createApiKey(aPIKeyCreate: APIKeyCreate, options?: any): AxiosPromise<APIKeyRead>;
    /**
     * Deletes the api_key and all its related data.
     * @summary Delete Api Key
     * @param {string} apiKeyId The unique id of the API key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteApiKey(apiKeyId: string, options?: any): AxiosPromise<void>;
    /**
     * Gets a single api_key matching the given api_key_id, if such api_key exists.
     * @summary Get Api Key
     * @param {string} apiKeyId The unique id of the API key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getApiKey(apiKeyId: string, options?: any): AxiosPromise<APIKeyRead>;
    /**
     *
     * @summary Get Api Key Scope
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getApiKeyScope(options?: any): AxiosPromise<APIKeyScopeRead>;
    /**
     *
     * @summary Get Environment Api Key
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEnvironmentApiKey(projId: string, envId: string, options?: any): AxiosPromise<APIKeyRead>;
    /**
     * Lists all the api_keys under the active organization.
     * @summary List Api Keys
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listApiKeys(page?: number | undefined, perPage?: number | undefined, options?: any): AxiosPromise<PaginatedResultAPIKeyRead>;
};
/**
 * Request parameters for createApiKey operation in APIKeysApi.
 * @export
 * @interface APIKeysApiCreateApiKeyRequest
 */
export interface APIKeysApiCreateApiKeyRequest {
    /**
     *
     * @type {APIKeyCreate}
     * @memberof APIKeysApiCreateApiKey
     */
    readonly aPIKeyCreate: APIKeyCreate;
}
/**
 * Request parameters for deleteApiKey operation in APIKeysApi.
 * @export
 * @interface APIKeysApiDeleteApiKeyRequest
 */
export interface APIKeysApiDeleteApiKeyRequest {
    /**
     * The unique id of the API key
     * @type {string}
     * @memberof APIKeysApiDeleteApiKey
     */
    readonly apiKeyId: string;
}
/**
 * Request parameters for getApiKey operation in APIKeysApi.
 * @export
 * @interface APIKeysApiGetApiKeyRequest
 */
export interface APIKeysApiGetApiKeyRequest {
    /**
     * The unique id of the API key
     * @type {string}
     * @memberof APIKeysApiGetApiKey
     */
    readonly apiKeyId: string;
}
/**
 * Request parameters for getEnvironmentApiKey operation in APIKeysApi.
 * @export
 * @interface APIKeysApiGetEnvironmentApiKeyRequest
 */
export interface APIKeysApiGetEnvironmentApiKeyRequest {
    /**
     * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof APIKeysApiGetEnvironmentApiKey
     */
    readonly projId: string;
    /**
     * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof APIKeysApiGetEnvironmentApiKey
     */
    readonly envId: string;
}
/**
 * Request parameters for listApiKeys operation in APIKeysApi.
 * @export
 * @interface APIKeysApiListApiKeysRequest
 */
export interface APIKeysApiListApiKeysRequest {
    /**
     * Page number of the results to fetch, starting at 1.
     * @type {number}
     * @memberof APIKeysApiListApiKeys
     */
    readonly page?: number;
    /**
     * The number of results per page (max 100).
     * @type {number}
     * @memberof APIKeysApiListApiKeys
     */
    readonly perPage?: number;
}
/**
 * APIKeysApi - object-oriented interface
 * @export
 * @class APIKeysApi
 * @extends {BaseAPI}
 */
export declare class APIKeysApi extends BaseAPI {
    /**
     * Creates a new api_key under the active organization.
     * @summary Create Api Key
     * @param {APIKeysApiCreateApiKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIKeysApi
     */
    createApiKey(requestParameters: APIKeysApiCreateApiKeyRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<APIKeyRead>>;
    /**
     * Deletes the api_key and all its related data.
     * @summary Delete Api Key
     * @param {APIKeysApiDeleteApiKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIKeysApi
     */
    deleteApiKey(requestParameters: APIKeysApiDeleteApiKeyRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Gets a single api_key matching the given api_key_id, if such api_key exists.
     * @summary Get Api Key
     * @param {APIKeysApiGetApiKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIKeysApi
     */
    getApiKey(requestParameters: APIKeysApiGetApiKeyRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<APIKeyRead>>;
    /**
     *
     * @summary Get Api Key Scope
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIKeysApi
     */
    getApiKeyScope(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<APIKeyScopeRead>>;
    /**
     *
     * @summary Get Environment Api Key
     * @param {APIKeysApiGetEnvironmentApiKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIKeysApi
     */
    getEnvironmentApiKey(requestParameters: APIKeysApiGetEnvironmentApiKeyRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<APIKeyRead>>;
    /**
     * Lists all the api_keys under the active organization.
     * @summary List Api Keys
     * @param {APIKeysApiListApiKeysRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIKeysApi
     */
    listApiKeys(requestParameters?: APIKeysApiListApiKeysRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PaginatedResultAPIKeyRead>>;
}
