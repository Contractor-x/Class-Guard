"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoggerFactory = exports.prettyConsoleLog = void 0;
const util_1 = __importDefault(require("util"));
const winston_1 = __importDefault(require("winston"));
function prettyConsoleLog(label, data) {
    console.log(label, util_1.default.inspect(data, false, 12, true));
}
exports.prettyConsoleLog = prettyConsoleLog;
const FgGreen = '\x1b[32m';
const FgCyan = '\x1b[36m';
// const COLOR_RESET: string = "\x1b[0m";
// const FgBlack: string = "\x1b[30m";
// const FgRed: string = "\x1b[31m";
// const FgYellow: string = "\x1b[33m";
// const FgBlue: string = "\x1b[34m";
// const FgMagenta: string = "\x1b[35m";
// const FgWhite: string = "\x1b[37m";
const consoleFormat = winston_1.default.format.printf(({ level, message, label }) => {
    return `${FgCyan}${label} [${level}]: ${FgGreen} ${message}`;
});
const MESSAGE = Symbol.for('message');
const LEVEL = Symbol.for('level');
class SimpleConsoleTransport extends winston_1.default.transports.Console {
    log(info, callback) {
        setImmediate(() => this.emit('logged', info));
        if (this.stderrLevels[info[LEVEL]]) {
            console.error(info[MESSAGE]);
        }
        else {
            console.log(info[MESSAGE]);
        }
        if (callback) {
            callback();
        }
    }
}
class LoggerFactory {
    static createLogger(config) {
        return winston_1.default.createLogger({
            level: config.log.level,
            format: winston_1.default.format.simple(),
            transports: [
                new SimpleConsoleTransport({
                    format: winston_1.default.format.combine(winston_1.default.format.label({ label: config.log.label }), winston_1.default.format.timestamp(), config.log.json ? winston_1.default.format.prettyPrint() : consoleFormat, winston_1.default.format.colorize({ all: true })),
                }),
            ],
        });
    }
}
exports.LoggerFactory = LoggerFactory;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xvZ2dlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxnREFBd0I7QUFFeEIsc0RBQThCO0FBSTlCLFNBQWdCLGdCQUFnQixDQUFDLEtBQWEsRUFBRSxJQUFTO0lBQ3ZELE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLGNBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUMxRCxDQUFDO0FBRkQsNENBRUM7QUFFRCxNQUFNLE9BQU8sR0FBRyxVQUFVLENBQUM7QUFDM0IsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDO0FBQzFCLHlDQUF5QztBQUN6QyxzQ0FBc0M7QUFDdEMsb0NBQW9DO0FBQ3BDLHVDQUF1QztBQUN2QyxxQ0FBcUM7QUFDckMsd0NBQXdDO0FBQ3hDLHNDQUFzQztBQUV0QyxNQUFNLGFBQWEsR0FBRyxpQkFBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRTtJQUN4RSxPQUFPLEdBQUcsTUFBTSxHQUFHLEtBQUssS0FBSyxLQUFLLE1BQU0sT0FBTyxJQUFJLE9BQU8sRUFBRSxDQUFDO0FBQy9ELENBQUMsQ0FBQyxDQUFDO0FBRUgsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUN0QyxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBRWxDLE1BQU0sc0JBQXVCLFNBQVEsaUJBQU8sQ0FBQyxVQUFVLENBQUMsT0FBTztJQUM3RCxHQUFHLENBQUMsSUFBUyxFQUFFLFFBQWE7UUFDMUIsWUFBWSxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7UUFFOUMsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO1lBQ2xDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7U0FDOUI7YUFBTTtZQUNMLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7U0FDNUI7UUFFRCxJQUFJLFFBQVEsRUFBRTtZQUNaLFFBQVEsRUFBRSxDQUFDO1NBQ1o7SUFDSCxDQUFDO0NBQ0Y7QUFFRCxNQUFhLGFBQWE7SUFDeEIsTUFBTSxDQUFDLFlBQVksQ0FBQyxNQUFxQjtRQUN2QyxPQUFPLGlCQUFPLENBQUMsWUFBWSxDQUFDO1lBQzFCLEtBQUssRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUs7WUFDdkIsTUFBTSxFQUFFLGlCQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRTtZQUMvQixVQUFVLEVBQUU7Z0JBQ1YsSUFBSSxzQkFBc0IsQ0FBQztvQkFDekIsTUFBTSxFQUFFLGlCQUFPLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FDNUIsaUJBQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsS0FBSyxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUMsRUFDakQsaUJBQU8sQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLEVBQzFCLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxpQkFBTyxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLENBQUMsYUFBYSxFQUM5RCxpQkFBTyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FDdkM7aUJBQ0YsQ0FBQzthQUNIO1NBQ0YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGO0FBakJELHNDQWlCQyJ9