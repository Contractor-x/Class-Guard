"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationsApi = exports.OrganizationsApiFactory = exports.OrganizationsApiFp = exports.OrganizationsApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * OrganizationsApi - axios parameter creator
 * @export
 */
exports.OrganizationsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Cancels an invite that was sent to a new member.
         * @summary Cancel Invite
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {string} inviteId Id of the invite to cancel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelInvite: async (orgId, inviteId, options = {}) => {
            // verify required parameter 'orgId' is not null or undefined
            common_1.assertParamExists('cancelInvite', 'orgId', orgId);
            // verify required parameter 'inviteId' is not null or undefined
            common_1.assertParamExists('cancelInvite', 'inviteId', inviteId);
            const localVarPath = `/v2/orgs/{org_id}/invites/{invite_id}`
                .replace(`{${'org_id'}}`, encodeURIComponent(String(orgId)))
                .replace(`{${'invite_id'}}`, encodeURIComponent(String(inviteId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new organization that will be owned by the authenticated actor (i.e: human team member or api key).
         * @summary Create Organization
         * @param {OrganizationCreate} organizationCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrganization: async (organizationCreate, options = {}) => {
            // verify required parameter 'organizationCreate' is not null or undefined
            common_1.assertParamExists('createOrganization', 'organizationCreate', organizationCreate);
            const localVarPath = `/v2/orgs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(organizationCreate, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes an organization (Permit.io account) and all its related data.
         * @summary Delete Organization
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrganization: async (orgId, options = {}) => {
            // verify required parameter 'orgId' is not null or undefined
            common_1.assertParamExists('deleteOrganization', 'orgId', orgId);
            const localVarPath = `/v2/orgs/{org_id}`.replace(`{${'org_id'}}`, encodeURIComponent(String(orgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a single organization (Permit.io account) matching the given org_id, if such org exists and can be accessed by the authenticated actor.
         * @summary Get Active Organization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActiveOrganization: async (options = {}) => {
            const localVarPath = `/v2/orgs/active/org`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a single organization (Permit.io account) matching the given org_id, if such org exists and can be accessed by the authenticated actor.
         * @summary Get Organization
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganization: async (orgId, options = {}) => {
            // verify required parameter 'orgId' is not null or undefined
            common_1.assertParamExists('getOrganization', 'orgId', orgId);
            const localVarPath = `/v2/orgs/{org_id}`.replace(`{${'org_id'}}`, encodeURIComponent(String(orgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invite new members into the organization.
         * @summary Invite Members To Organization
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {Array<InviteCreate>} inviteCreate
         * @param {string} [inviterName]
         * @param {string} [inviterEmail]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteMembersToOrganization: async (orgId, inviteCreate, inviterName, inviterEmail, options = {}) => {
            // verify required parameter 'orgId' is not null or undefined
            common_1.assertParamExists('inviteMembersToOrganization', 'orgId', orgId);
            // verify required parameter 'inviteCreate' is not null or undefined
            common_1.assertParamExists('inviteMembersToOrganization', 'inviteCreate', inviteCreate);
            const localVarPath = `/v2/orgs/{org_id}/invites`.replace(`{${'org_id'}}`, encodeURIComponent(String(orgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (inviterName !== undefined) {
                localVarQueryParameter['inviter_name'] = inviterName;
            }
            if (inviterEmail !== undefined) {
                localVarQueryParameter['inviter_email'] = inviterEmail;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(inviteCreate, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists pending organization invites
         * @summary List Organization Invites
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrganizationInvites: async (orgId, page, perPage, options = {}) => {
            // verify required parameter 'orgId' is not null or undefined
            common_1.assertParamExists('listOrganizationInvites', 'orgId', orgId);
            const localVarPath = `/v2/orgs/{org_id}/invites`.replace(`{${'org_id'}}`, encodeURIComponent(String(orgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists all the organizations that can be accessed by the authenticated actor (i.e: human team member or api key).
         * @summary List Organizations
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrganizations: async (page, perPage, options = {}) => {
            const localVarPath = `/v2/orgs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the organization\'s profile.
         * @summary Update Organization
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {OrganizationUpdate} organizationUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrganization: async (orgId, organizationUpdate, options = {}) => {
            // verify required parameter 'orgId' is not null or undefined
            common_1.assertParamExists('updateOrganization', 'orgId', orgId);
            // verify required parameter 'organizationUpdate' is not null or undefined
            common_1.assertParamExists('updateOrganization', 'organizationUpdate', organizationUpdate);
            const localVarPath = `/v2/orgs/{org_id}`.replace(`{${'org_id'}}`, encodeURIComponent(String(orgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(organizationUpdate, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * OrganizationsApi - functional programming interface
 * @export
 */
exports.OrganizationsApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.OrganizationsApiAxiosParamCreator(configuration);
    return {
        /**
         * Cancels an invite that was sent to a new member.
         * @summary Cancel Invite
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {string} inviteId Id of the invite to cancel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelInvite(orgId, inviteId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelInvite(orgId, inviteId, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Creates a new organization that will be owned by the authenticated actor (i.e: human team member or api key).
         * @summary Create Organization
         * @param {OrganizationCreate} organizationCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOrganization(organizationCreate, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOrganization(organizationCreate, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Deletes an organization (Permit.io account) and all its related data.
         * @summary Delete Organization
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOrganization(orgId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOrganization(orgId, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Gets a single organization (Permit.io account) matching the given org_id, if such org exists and can be accessed by the authenticated actor.
         * @summary Get Active Organization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getActiveOrganization(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getActiveOrganization(options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Gets a single organization (Permit.io account) matching the given org_id, if such org exists and can be accessed by the authenticated actor.
         * @summary Get Organization
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganization(orgId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganization(orgId, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Invite new members into the organization.
         * @summary Invite Members To Organization
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {Array<InviteCreate>} inviteCreate
         * @param {string} [inviterName]
         * @param {string} [inviterEmail]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inviteMembersToOrganization(orgId, inviteCreate, inviterName, inviterEmail, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inviteMembersToOrganization(orgId, inviteCreate, inviterName, inviterEmail, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Lists pending organization invites
         * @summary List Organization Invites
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listOrganizationInvites(orgId, page, perPage, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listOrganizationInvites(orgId, page, perPage, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Lists all the organizations that can be accessed by the authenticated actor (i.e: human team member or api key).
         * @summary List Organizations
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listOrganizations(page, perPage, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listOrganizations(page, perPage, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Updates the organization\'s profile.
         * @summary Update Organization
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {OrganizationUpdate} organizationUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOrganization(orgId, organizationUpdate, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateOrganization(orgId, organizationUpdate, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
    };
};
/**
 * OrganizationsApi - factory interface
 * @export
 */
exports.OrganizationsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.OrganizationsApiFp(configuration);
    return {
        /**
         * Cancels an invite that was sent to a new member.
         * @summary Cancel Invite
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {string} inviteId Id of the invite to cancel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelInvite(orgId, inviteId, options) {
            return localVarFp
                .cancelInvite(orgId, inviteId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Creates a new organization that will be owned by the authenticated actor (i.e: human team member or api key).
         * @summary Create Organization
         * @param {OrganizationCreate} organizationCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrganization(organizationCreate, options) {
            return localVarFp
                .createOrganization(organizationCreate, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Deletes an organization (Permit.io account) and all its related data.
         * @summary Delete Organization
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrganization(orgId, options) {
            return localVarFp
                .deleteOrganization(orgId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Gets a single organization (Permit.io account) matching the given org_id, if such org exists and can be accessed by the authenticated actor.
         * @summary Get Active Organization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActiveOrganization(options) {
            return localVarFp.getActiveOrganization(options).then((request) => request(axios, basePath));
        },
        /**
         * Gets a single organization (Permit.io account) matching the given org_id, if such org exists and can be accessed by the authenticated actor.
         * @summary Get Organization
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganization(orgId, options) {
            return localVarFp.getOrganization(orgId, options).then((request) => request(axios, basePath));
        },
        /**
         * Invite new members into the organization.
         * @summary Invite Members To Organization
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {Array<InviteCreate>} inviteCreate
         * @param {string} [inviterName]
         * @param {string} [inviterEmail]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteMembersToOrganization(orgId, inviteCreate, inviterName, inviterEmail, options) {
            return localVarFp
                .inviteMembersToOrganization(orgId, inviteCreate, inviterName, inviterEmail, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Lists pending organization invites
         * @summary List Organization Invites
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrganizationInvites(orgId, page, perPage, options) {
            return localVarFp
                .listOrganizationInvites(orgId, page, perPage, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Lists all the organizations that can be accessed by the authenticated actor (i.e: human team member or api key).
         * @summary List Organizations
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrganizations(page, perPage, options) {
            return localVarFp
                .listOrganizations(page, perPage, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Updates the organization\'s profile.
         * @summary Update Organization
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {OrganizationUpdate} organizationUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrganization(orgId, organizationUpdate, options) {
            return localVarFp
                .updateOrganization(orgId, organizationUpdate, options)
                .then((request) => request(axios, basePath));
        },
    };
};
/**
 * OrganizationsApi - object-oriented interface
 * @export
 * @class OrganizationsApi
 * @extends {BaseAPI}
 */
class OrganizationsApi extends base_1.BaseAPI {
    /**
     * Cancels an invite that was sent to a new member.
     * @summary Cancel Invite
     * @param {OrganizationsApiCancelInviteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    cancelInvite(requestParameters, options) {
        return exports.OrganizationsApiFp(this.configuration)
            .cancelInvite(requestParameters.orgId, requestParameters.inviteId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Creates a new organization that will be owned by the authenticated actor (i.e: human team member or api key).
     * @summary Create Organization
     * @param {OrganizationsApiCreateOrganizationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    createOrganization(requestParameters, options) {
        return exports.OrganizationsApiFp(this.configuration)
            .createOrganization(requestParameters.organizationCreate, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes an organization (Permit.io account) and all its related data.
     * @summary Delete Organization
     * @param {OrganizationsApiDeleteOrganizationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    deleteOrganization(requestParameters, options) {
        return exports.OrganizationsApiFp(this.configuration)
            .deleteOrganization(requestParameters.orgId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gets a single organization (Permit.io account) matching the given org_id, if such org exists and can be accessed by the authenticated actor.
     * @summary Get Active Organization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    getActiveOrganization(options) {
        return exports.OrganizationsApiFp(this.configuration)
            .getActiveOrganization(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gets a single organization (Permit.io account) matching the given org_id, if such org exists and can be accessed by the authenticated actor.
     * @summary Get Organization
     * @param {OrganizationsApiGetOrganizationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    getOrganization(requestParameters, options) {
        return exports.OrganizationsApiFp(this.configuration)
            .getOrganization(requestParameters.orgId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Invite new members into the organization.
     * @summary Invite Members To Organization
     * @param {OrganizationsApiInviteMembersToOrganizationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    inviteMembersToOrganization(requestParameters, options) {
        return exports.OrganizationsApiFp(this.configuration)
            .inviteMembersToOrganization(requestParameters.orgId, requestParameters.inviteCreate, requestParameters.inviterName, requestParameters.inviterEmail, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists pending organization invites
     * @summary List Organization Invites
     * @param {OrganizationsApiListOrganizationInvitesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    listOrganizationInvites(requestParameters, options) {
        return exports.OrganizationsApiFp(this.configuration)
            .listOrganizationInvites(requestParameters.orgId, requestParameters.page, requestParameters.perPage, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists all the organizations that can be accessed by the authenticated actor (i.e: human team member or api key).
     * @summary List Organizations
     * @param {OrganizationsApiListOrganizationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    listOrganizations(requestParameters = {}, options) {
        return exports.OrganizationsApiFp(this.configuration)
            .listOrganizations(requestParameters.page, requestParameters.perPage, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates the organization\'s profile.
     * @summary Update Organization
     * @param {OrganizationsApiUpdateOrganizationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    updateOrganization(requestParameters, options) {
        return exports.OrganizationsApiFp(this.configuration)
            .updateOrganization(requestParameters.orgId, requestParameters.organizationUpdate, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.OrganizationsApi = OrganizationsApi;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3JnYW5pemF0aW9ucy1hcGkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvb3BlbmFwaS9hcGkvb3JnYW5pemF0aW9ucy1hcGkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLG9CQUFvQjtBQUNwQixvQkFBb0I7QUFDcEI7Ozs7Ozs7Ozs7R0FVRzs7Ozs7O0FBRUgsa0RBQXFGO0FBRXJGLHlEQUF5RDtBQUN6RCxhQUFhO0FBQ2Isc0NBV21CO0FBQ25CLGFBQWE7QUFDYixrQ0FBNkY7QUFpQjdGOzs7R0FHRztBQUNVLFFBQUEsaUNBQWlDLEdBQUcsVUFBVSxhQUE2QjtJQUN0RixPQUFPO1FBQ0w7Ozs7Ozs7V0FPRztRQUNILFlBQVksRUFBRSxLQUFLLEVBQ2pCLEtBQWEsRUFDYixRQUFnQixFQUNoQixVQUE4QixFQUFFLEVBQ1YsRUFBRTtZQUN4Qiw2REFBNkQ7WUFDN0QsMEJBQWlCLENBQUMsY0FBYyxFQUFFLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztZQUNsRCxnRUFBZ0U7WUFDaEUsMEJBQWlCLENBQUMsY0FBYyxFQUFFLFVBQVUsRUFBRSxRQUFRLENBQUMsQ0FBQztZQUN4RCxNQUFNLFlBQVksR0FBRyx1Q0FBdUM7aUJBQ3pELE9BQU8sQ0FBQyxJQUFJLFFBQVEsR0FBRyxFQUFFLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO2lCQUMzRCxPQUFPLENBQUMsSUFBSSxXQUFXLEdBQUcsRUFBRSxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3JFLG9GQUFvRjtZQUNwRixNQUFNLGNBQWMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxZQUFZLEVBQUUsdUJBQWMsQ0FBQyxDQUFDO1lBQzdELElBQUksV0FBVyxDQUFDO1lBQ2hCLElBQUksYUFBYSxFQUFFO2dCQUNqQixXQUFXLEdBQUcsYUFBYSxDQUFDLFdBQVcsQ0FBQzthQUN6QztZQUVELE1BQU0sc0JBQXNCLGlDQUFLLE1BQU0sRUFBRSxRQUFRLElBQUssV0FBVyxHQUFLLE9BQU8sQ0FBRSxDQUFDO1lBQ2hGLE1BQU0sdUJBQXVCLEdBQUcsRUFBUyxDQUFDO1lBQzFDLE1BQU0sc0JBQXNCLEdBQUcsRUFBUyxDQUFDO1lBRXpDLHFDQUFxQztZQUNyQyxzQ0FBc0M7WUFDdEMsTUFBTSw4QkFBcUIsQ0FBQyx1QkFBdUIsRUFBRSxhQUFhLENBQUMsQ0FBQztZQUVwRSx3QkFBZSxDQUFDLGNBQWMsRUFBRSxzQkFBc0IsQ0FBQyxDQUFDO1lBQ3hELElBQUksc0JBQXNCLEdBQUcsV0FBVyxJQUFJLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztZQUMzRixzQkFBc0IsQ0FBQyxPQUFPLGlEQUN6Qix1QkFBdUIsR0FDdkIsc0JBQXNCLEdBQ3RCLE9BQU8sQ0FBQyxPQUFPLENBQ25CLENBQUM7WUFFRixPQUFPO2dCQUNMLEdBQUcsRUFBRSxxQkFBWSxDQUFDLGNBQWMsQ0FBQztnQkFDakMsT0FBTyxFQUFFLHNCQUFzQjthQUNoQyxDQUFDO1FBQ0osQ0FBQztRQUNEOzs7Ozs7V0FNRztRQUNILGtCQUFrQixFQUFFLEtBQUssRUFDdkIsa0JBQXNDLEVBQ3RDLFVBQThCLEVBQUUsRUFDVixFQUFFO1lBQ3hCLDBFQUEwRTtZQUMxRSwwQkFBaUIsQ0FBQyxvQkFBb0IsRUFBRSxvQkFBb0IsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO1lBQ2xGLE1BQU0sWUFBWSxHQUFHLFVBQVUsQ0FBQztZQUNoQyxvRkFBb0Y7WUFDcEYsTUFBTSxjQUFjLEdBQUcsSUFBSSxHQUFHLENBQUMsWUFBWSxFQUFFLHVCQUFjLENBQUMsQ0FBQztZQUM3RCxJQUFJLFdBQVcsQ0FBQztZQUNoQixJQUFJLGFBQWEsRUFBRTtnQkFDakIsV0FBVyxHQUFHLGFBQWEsQ0FBQyxXQUFXLENBQUM7YUFDekM7WUFFRCxNQUFNLHNCQUFzQixpQ0FBSyxNQUFNLEVBQUUsTUFBTSxJQUFLLFdBQVcsR0FBSyxPQUFPLENBQUUsQ0FBQztZQUM5RSxNQUFNLHVCQUF1QixHQUFHLEVBQVMsQ0FBQztZQUMxQyxNQUFNLHNCQUFzQixHQUFHLEVBQVMsQ0FBQztZQUV6QyxxQ0FBcUM7WUFDckMsc0NBQXNDO1lBQ3RDLE1BQU0sOEJBQXFCLENBQUMsdUJBQXVCLEVBQUUsYUFBYSxDQUFDLENBQUM7WUFFcEUsdUJBQXVCLENBQUMsY0FBYyxDQUFDLEdBQUcsa0JBQWtCLENBQUM7WUFFN0Qsd0JBQWUsQ0FBQyxjQUFjLEVBQUUsc0JBQXNCLENBQUMsQ0FBQztZQUN4RCxJQUFJLHNCQUFzQixHQUFHLFdBQVcsSUFBSSxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDM0Ysc0JBQXNCLENBQUMsT0FBTyxpREFDekIsdUJBQXVCLEdBQ3ZCLHNCQUFzQixHQUN0QixPQUFPLENBQUMsT0FBTyxDQUNuQixDQUFDO1lBQ0Ysc0JBQXNCLENBQUMsSUFBSSxHQUFHLDhCQUFxQixDQUNqRCxrQkFBa0IsRUFDbEIsc0JBQXNCLEVBQ3RCLGFBQWEsQ0FDZCxDQUFDO1lBRUYsT0FBTztnQkFDTCxHQUFHLEVBQUUscUJBQVksQ0FBQyxjQUFjLENBQUM7Z0JBQ2pDLE9BQU8sRUFBRSxzQkFBc0I7YUFDaEMsQ0FBQztRQUNKLENBQUM7UUFDRDs7Ozs7O1dBTUc7UUFDSCxrQkFBa0IsRUFBRSxLQUFLLEVBQ3ZCLEtBQWEsRUFDYixVQUE4QixFQUFFLEVBQ1YsRUFBRTtZQUN4Qiw2REFBNkQ7WUFDN0QsMEJBQWlCLENBQUMsb0JBQW9CLEVBQUUsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQ3hELE1BQU0sWUFBWSxHQUFHLG1CQUFtQixDQUFDLE9BQU8sQ0FDOUMsSUFBSSxRQUFRLEdBQUcsRUFDZixrQkFBa0IsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FDbEMsQ0FBQztZQUNGLG9GQUFvRjtZQUNwRixNQUFNLGNBQWMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxZQUFZLEVBQUUsdUJBQWMsQ0FBQyxDQUFDO1lBQzdELElBQUksV0FBVyxDQUFDO1lBQ2hCLElBQUksYUFBYSxFQUFFO2dCQUNqQixXQUFXLEdBQUcsYUFBYSxDQUFDLFdBQVcsQ0FBQzthQUN6QztZQUVELE1BQU0sc0JBQXNCLGlDQUFLLE1BQU0sRUFBRSxRQUFRLElBQUssV0FBVyxHQUFLLE9BQU8sQ0FBRSxDQUFDO1lBQ2hGLE1BQU0sdUJBQXVCLEdBQUcsRUFBUyxDQUFDO1lBQzFDLE1BQU0sc0JBQXNCLEdBQUcsRUFBUyxDQUFDO1lBRXpDLHFDQUFxQztZQUNyQyxzQ0FBc0M7WUFDdEMsTUFBTSw4QkFBcUIsQ0FBQyx1QkFBdUIsRUFBRSxhQUFhLENBQUMsQ0FBQztZQUVwRSx3QkFBZSxDQUFDLGNBQWMsRUFBRSxzQkFBc0IsQ0FBQyxDQUFDO1lBQ3hELElBQUksc0JBQXNCLEdBQUcsV0FBVyxJQUFJLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztZQUMzRixzQkFBc0IsQ0FBQyxPQUFPLGlEQUN6Qix1QkFBdUIsR0FDdkIsc0JBQXNCLEdBQ3RCLE9BQU8sQ0FBQyxPQUFPLENBQ25CLENBQUM7WUFFRixPQUFPO2dCQUNMLEdBQUcsRUFBRSxxQkFBWSxDQUFDLGNBQWMsQ0FBQztnQkFDakMsT0FBTyxFQUFFLHNCQUFzQjthQUNoQyxDQUFDO1FBQ0osQ0FBQztRQUNEOzs7OztXQUtHO1FBQ0gscUJBQXFCLEVBQUUsS0FBSyxFQUFFLFVBQThCLEVBQUUsRUFBd0IsRUFBRTtZQUN0RixNQUFNLFlBQVksR0FBRyxxQkFBcUIsQ0FBQztZQUMzQyxvRkFBb0Y7WUFDcEYsTUFBTSxjQUFjLEdBQUcsSUFBSSxHQUFHLENBQUMsWUFBWSxFQUFFLHVCQUFjLENBQUMsQ0FBQztZQUM3RCxJQUFJLFdBQVcsQ0FBQztZQUNoQixJQUFJLGFBQWEsRUFBRTtnQkFDakIsV0FBVyxHQUFHLGFBQWEsQ0FBQyxXQUFXLENBQUM7YUFDekM7WUFFRCxNQUFNLHNCQUFzQixpQ0FBSyxNQUFNLEVBQUUsS0FBSyxJQUFLLFdBQVcsR0FBSyxPQUFPLENBQUUsQ0FBQztZQUM3RSxNQUFNLHVCQUF1QixHQUFHLEVBQVMsQ0FBQztZQUMxQyxNQUFNLHNCQUFzQixHQUFHLEVBQVMsQ0FBQztZQUV6QyxxQ0FBcUM7WUFDckMsc0NBQXNDO1lBQ3RDLE1BQU0sOEJBQXFCLENBQUMsdUJBQXVCLEVBQUUsYUFBYSxDQUFDLENBQUM7WUFFcEUsd0JBQWUsQ0FBQyxjQUFjLEVBQUUsc0JBQXNCLENBQUMsQ0FBQztZQUN4RCxJQUFJLHNCQUFzQixHQUFHLFdBQVcsSUFBSSxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDM0Ysc0JBQXNCLENBQUMsT0FBTyxpREFDekIsdUJBQXVCLEdBQ3ZCLHNCQUFzQixHQUN0QixPQUFPLENBQUMsT0FBTyxDQUNuQixDQUFDO1lBRUYsT0FBTztnQkFDTCxHQUFHLEVBQUUscUJBQVksQ0FBQyxjQUFjLENBQUM7Z0JBQ2pDLE9BQU8sRUFBRSxzQkFBc0I7YUFDaEMsQ0FBQztRQUNKLENBQUM7UUFDRDs7Ozs7O1dBTUc7UUFDSCxlQUFlLEVBQUUsS0FBSyxFQUNwQixLQUFhLEVBQ2IsVUFBOEIsRUFBRSxFQUNWLEVBQUU7WUFDeEIsNkRBQTZEO1lBQzdELDBCQUFpQixDQUFDLGlCQUFpQixFQUFFLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztZQUNyRCxNQUFNLFlBQVksR0FBRyxtQkFBbUIsQ0FBQyxPQUFPLENBQzlDLElBQUksUUFBUSxHQUFHLEVBQ2Ysa0JBQWtCLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQ2xDLENBQUM7WUFDRixvRkFBb0Y7WUFDcEYsTUFBTSxjQUFjLEdBQUcsSUFBSSxHQUFHLENBQUMsWUFBWSxFQUFFLHVCQUFjLENBQUMsQ0FBQztZQUM3RCxJQUFJLFdBQVcsQ0FBQztZQUNoQixJQUFJLGFBQWEsRUFBRTtnQkFDakIsV0FBVyxHQUFHLGFBQWEsQ0FBQyxXQUFXLENBQUM7YUFDekM7WUFFRCxNQUFNLHNCQUFzQixpQ0FBSyxNQUFNLEVBQUUsS0FBSyxJQUFLLFdBQVcsR0FBSyxPQUFPLENBQUUsQ0FBQztZQUM3RSxNQUFNLHVCQUF1QixHQUFHLEVBQVMsQ0FBQztZQUMxQyxNQUFNLHNCQUFzQixHQUFHLEVBQVMsQ0FBQztZQUV6QyxxQ0FBcUM7WUFDckMsc0NBQXNDO1lBQ3RDLE1BQU0sOEJBQXFCLENBQUMsdUJBQXVCLEVBQUUsYUFBYSxDQUFDLENBQUM7WUFFcEUsd0JBQWUsQ0FBQyxjQUFjLEVBQUUsc0JBQXNCLENBQUMsQ0FBQztZQUN4RCxJQUFJLHNCQUFzQixHQUFHLFdBQVcsSUFBSSxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDM0Ysc0JBQXNCLENBQUMsT0FBTyxpREFDekIsdUJBQXVCLEdBQ3ZCLHNCQUFzQixHQUN0QixPQUFPLENBQUMsT0FBTyxDQUNuQixDQUFDO1lBRUYsT0FBTztnQkFDTCxHQUFHLEVBQUUscUJBQVksQ0FBQyxjQUFjLENBQUM7Z0JBQ2pDLE9BQU8sRUFBRSxzQkFBc0I7YUFDaEMsQ0FBQztRQUNKLENBQUM7UUFDRDs7Ozs7Ozs7O1dBU0c7UUFDSCwyQkFBMkIsRUFBRSxLQUFLLEVBQ2hDLEtBQWEsRUFDYixZQUFpQyxFQUNqQyxXQUFvQixFQUNwQixZQUFxQixFQUNyQixVQUE4QixFQUFFLEVBQ1YsRUFBRTtZQUN4Qiw2REFBNkQ7WUFDN0QsMEJBQWlCLENBQUMsNkJBQTZCLEVBQUUsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQ2pFLG9FQUFvRTtZQUNwRSwwQkFBaUIsQ0FBQyw2QkFBNkIsRUFBRSxjQUFjLEVBQUUsWUFBWSxDQUFDLENBQUM7WUFDL0UsTUFBTSxZQUFZLEdBQUcsMkJBQTJCLENBQUMsT0FBTyxDQUN0RCxJQUFJLFFBQVEsR0FBRyxFQUNmLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUNsQyxDQUFDO1lBQ0Ysb0ZBQW9GO1lBQ3BGLE1BQU0sY0FBYyxHQUFHLElBQUksR0FBRyxDQUFDLFlBQVksRUFBRSx1QkFBYyxDQUFDLENBQUM7WUFDN0QsSUFBSSxXQUFXLENBQUM7WUFDaEIsSUFBSSxhQUFhLEVBQUU7Z0JBQ2pCLFdBQVcsR0FBRyxhQUFhLENBQUMsV0FBVyxDQUFDO2FBQ3pDO1lBRUQsTUFBTSxzQkFBc0IsaUNBQUssTUFBTSxFQUFFLE1BQU0sSUFBSyxXQUFXLEdBQUssT0FBTyxDQUFFLENBQUM7WUFDOUUsTUFBTSx1QkFBdUIsR0FBRyxFQUFTLENBQUM7WUFDMUMsTUFBTSxzQkFBc0IsR0FBRyxFQUFTLENBQUM7WUFFekMscUNBQXFDO1lBQ3JDLHNDQUFzQztZQUN0QyxNQUFNLDhCQUFxQixDQUFDLHVCQUF1QixFQUFFLGFBQWEsQ0FBQyxDQUFDO1lBRXBFLElBQUksV0FBVyxLQUFLLFNBQVMsRUFBRTtnQkFDN0Isc0JBQXNCLENBQUMsY0FBYyxDQUFDLEdBQUcsV0FBVyxDQUFDO2FBQ3REO1lBRUQsSUFBSSxZQUFZLEtBQUssU0FBUyxFQUFFO2dCQUM5QixzQkFBc0IsQ0FBQyxlQUFlLENBQUMsR0FBRyxZQUFZLENBQUM7YUFDeEQ7WUFFRCx1QkFBdUIsQ0FBQyxjQUFjLENBQUMsR0FBRyxrQkFBa0IsQ0FBQztZQUU3RCx3QkFBZSxDQUFDLGNBQWMsRUFBRSxzQkFBc0IsQ0FBQyxDQUFDO1lBQ3hELElBQUksc0JBQXNCLEdBQUcsV0FBVyxJQUFJLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztZQUMzRixzQkFBc0IsQ0FBQyxPQUFPLGlEQUN6Qix1QkFBdUIsR0FDdkIsc0JBQXNCLEdBQ3RCLE9BQU8sQ0FBQyxPQUFPLENBQ25CLENBQUM7WUFDRixzQkFBc0IsQ0FBQyxJQUFJLEdBQUcsOEJBQXFCLENBQ2pELFlBQVksRUFDWixzQkFBc0IsRUFDdEIsYUFBYSxDQUNkLENBQUM7WUFFRixPQUFPO2dCQUNMLEdBQUcsRUFBRSxxQkFBWSxDQUFDLGNBQWMsQ0FBQztnQkFDakMsT0FBTyxFQUFFLHNCQUFzQjthQUNoQyxDQUFDO1FBQ0osQ0FBQztRQUNEOzs7Ozs7OztXQVFHO1FBQ0gsdUJBQXVCLEVBQUUsS0FBSyxFQUM1QixLQUFhLEVBQ2IsSUFBYSxFQUNiLE9BQWdCLEVBQ2hCLFVBQThCLEVBQUUsRUFDVixFQUFFO1lBQ3hCLDZEQUE2RDtZQUM3RCwwQkFBaUIsQ0FBQyx5QkFBeUIsRUFBRSxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDN0QsTUFBTSxZQUFZLEdBQUcsMkJBQTJCLENBQUMsT0FBTyxDQUN0RCxJQUFJLFFBQVEsR0FBRyxFQUNmLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUNsQyxDQUFDO1lBQ0Ysb0ZBQW9GO1lBQ3BGLE1BQU0sY0FBYyxHQUFHLElBQUksR0FBRyxDQUFDLFlBQVksRUFBRSx1QkFBYyxDQUFDLENBQUM7WUFDN0QsSUFBSSxXQUFXLENBQUM7WUFDaEIsSUFBSSxhQUFhLEVBQUU7Z0JBQ2pCLFdBQVcsR0FBRyxhQUFhLENBQUMsV0FBVyxDQUFDO2FBQ3pDO1lBRUQsTUFBTSxzQkFBc0IsaUNBQUssTUFBTSxFQUFFLEtBQUssSUFBSyxXQUFXLEdBQUssT0FBTyxDQUFFLENBQUM7WUFDN0UsTUFBTSx1QkFBdUIsR0FBRyxFQUFTLENBQUM7WUFDMUMsTUFBTSxzQkFBc0IsR0FBRyxFQUFTLENBQUM7WUFFekMscUNBQXFDO1lBQ3JDLHNDQUFzQztZQUN0QyxNQUFNLDhCQUFxQixDQUFDLHVCQUF1QixFQUFFLGFBQWEsQ0FBQyxDQUFDO1lBRXBFLElBQUksSUFBSSxLQUFLLFNBQVMsRUFBRTtnQkFDdEIsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDO2FBQ3ZDO1lBRUQsSUFBSSxPQUFPLEtBQUssU0FBUyxFQUFFO2dCQUN6QixzQkFBc0IsQ0FBQyxVQUFVLENBQUMsR0FBRyxPQUFPLENBQUM7YUFDOUM7WUFFRCx3QkFBZSxDQUFDLGNBQWMsRUFBRSxzQkFBc0IsQ0FBQyxDQUFDO1lBQ3hELElBQUksc0JBQXNCLEdBQUcsV0FBVyxJQUFJLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztZQUMzRixzQkFBc0IsQ0FBQyxPQUFPLGlEQUN6Qix1QkFBdUIsR0FDdkIsc0JBQXNCLEdBQ3RCLE9BQU8sQ0FBQyxPQUFPLENBQ25CLENBQUM7WUFFRixPQUFPO2dCQUNMLEdBQUcsRUFBRSxxQkFBWSxDQUFDLGNBQWMsQ0FBQztnQkFDakMsT0FBTyxFQUFFLHNCQUFzQjthQUNoQyxDQUFDO1FBQ0osQ0FBQztRQUNEOzs7Ozs7O1dBT0c7UUFDSCxpQkFBaUIsRUFBRSxLQUFLLEVBQ3RCLElBQWEsRUFDYixPQUFnQixFQUNoQixVQUE4QixFQUFFLEVBQ1YsRUFBRTtZQUN4QixNQUFNLFlBQVksR0FBRyxVQUFVLENBQUM7WUFDaEMsb0ZBQW9GO1lBQ3BGLE1BQU0sY0FBYyxHQUFHLElBQUksR0FBRyxDQUFDLFlBQVksRUFBRSx1QkFBYyxDQUFDLENBQUM7WUFDN0QsSUFBSSxXQUFXLENBQUM7WUFDaEIsSUFBSSxhQUFhLEVBQUU7Z0JBQ2pCLFdBQVcsR0FBRyxhQUFhLENBQUMsV0FBVyxDQUFDO2FBQ3pDO1lBRUQsTUFBTSxzQkFBc0IsaUNBQUssTUFBTSxFQUFFLEtBQUssSUFBSyxXQUFXLEdBQUssT0FBTyxDQUFFLENBQUM7WUFDN0UsTUFBTSx1QkFBdUIsR0FBRyxFQUFTLENBQUM7WUFDMUMsTUFBTSxzQkFBc0IsR0FBRyxFQUFTLENBQUM7WUFFekMscUNBQXFDO1lBQ3JDLHNDQUFzQztZQUN0QyxNQUFNLDhCQUFxQixDQUFDLHVCQUF1QixFQUFFLGFBQWEsQ0FBQyxDQUFDO1lBRXBFLElBQUksSUFBSSxLQUFLLFNBQVMsRUFBRTtnQkFDdEIsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDO2FBQ3ZDO1lBRUQsSUFBSSxPQUFPLEtBQUssU0FBUyxFQUFFO2dCQUN6QixzQkFBc0IsQ0FBQyxVQUFVLENBQUMsR0FBRyxPQUFPLENBQUM7YUFDOUM7WUFFRCx3QkFBZSxDQUFDLGNBQWMsRUFBRSxzQkFBc0IsQ0FBQyxDQUFDO1lBQ3hELElBQUksc0JBQXNCLEdBQUcsV0FBVyxJQUFJLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztZQUMzRixzQkFBc0IsQ0FBQyxPQUFPLGlEQUN6Qix1QkFBdUIsR0FDdkIsc0JBQXNCLEdBQ3RCLE9BQU8sQ0FBQyxPQUFPLENBQ25CLENBQUM7WUFFRixPQUFPO2dCQUNMLEdBQUcsRUFBRSxxQkFBWSxDQUFDLGNBQWMsQ0FBQztnQkFDakMsT0FBTyxFQUFFLHNCQUFzQjthQUNoQyxDQUFDO1FBQ0osQ0FBQztRQUNEOzs7Ozs7O1dBT0c7UUFDSCxrQkFBa0IsRUFBRSxLQUFLLEVBQ3ZCLEtBQWEsRUFDYixrQkFBc0MsRUFDdEMsVUFBOEIsRUFBRSxFQUNWLEVBQUU7WUFDeEIsNkRBQTZEO1lBQzdELDBCQUFpQixDQUFDLG9CQUFvQixFQUFFLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztZQUN4RCwwRUFBMEU7WUFDMUUsMEJBQWlCLENBQUMsb0JBQW9CLEVBQUUsb0JBQW9CLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztZQUNsRixNQUFNLFlBQVksR0FBRyxtQkFBbUIsQ0FBQyxPQUFPLENBQzlDLElBQUksUUFBUSxHQUFHLEVBQ2Ysa0JBQWtCLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQ2xDLENBQUM7WUFDRixvRkFBb0Y7WUFDcEYsTUFBTSxjQUFjLEdBQUcsSUFBSSxHQUFHLENBQUMsWUFBWSxFQUFFLHVCQUFjLENBQUMsQ0FBQztZQUM3RCxJQUFJLFdBQVcsQ0FBQztZQUNoQixJQUFJLGFBQWEsRUFBRTtnQkFDakIsV0FBVyxHQUFHLGFBQWEsQ0FBQyxXQUFXLENBQUM7YUFDekM7WUFFRCxNQUFNLHNCQUFzQixpQ0FBSyxNQUFNLEVBQUUsT0FBTyxJQUFLLFdBQVcsR0FBSyxPQUFPLENBQUUsQ0FBQztZQUMvRSxNQUFNLHVCQUF1QixHQUFHLEVBQVMsQ0FBQztZQUMxQyxNQUFNLHNCQUFzQixHQUFHLEVBQVMsQ0FBQztZQUV6QyxxQ0FBcUM7WUFDckMsc0NBQXNDO1lBQ3RDLE1BQU0sOEJBQXFCLENBQUMsdUJBQXVCLEVBQUUsYUFBYSxDQUFDLENBQUM7WUFFcEUsdUJBQXVCLENBQUMsY0FBYyxDQUFDLEdBQUcsa0JBQWtCLENBQUM7WUFFN0Qsd0JBQWUsQ0FBQyxjQUFjLEVBQUUsc0JBQXNCLENBQUMsQ0FBQztZQUN4RCxJQUFJLHNCQUFzQixHQUFHLFdBQVcsSUFBSSxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDM0Ysc0JBQXNCLENBQUMsT0FBTyxpREFDekIsdUJBQXVCLEdBQ3ZCLHNCQUFzQixHQUN0QixPQUFPLENBQUMsT0FBTyxDQUNuQixDQUFDO1lBQ0Ysc0JBQXNCLENBQUMsSUFBSSxHQUFHLDhCQUFxQixDQUNqRCxrQkFBa0IsRUFDbEIsc0JBQXNCLEVBQ3RCLGFBQWEsQ0FDZCxDQUFDO1lBRUYsT0FBTztnQkFDTCxHQUFHLEVBQUUscUJBQVksQ0FBQyxjQUFjLENBQUM7Z0JBQ2pDLE9BQU8sRUFBRSxzQkFBc0I7YUFDaEMsQ0FBQztRQUNKLENBQUM7S0FDRixDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBRUY7OztHQUdHO0FBQ1UsUUFBQSxrQkFBa0IsR0FBRyxVQUFVLGFBQTZCO0lBQ3ZFLE1BQU0seUJBQXlCLEdBQUcseUNBQWlDLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDbkYsT0FBTztRQUNMOzs7Ozs7O1dBT0c7UUFDSCxLQUFLLENBQUMsWUFBWSxDQUNoQixLQUFhLEVBQ2IsUUFBZ0IsRUFDaEIsT0FBNEI7WUFFNUIsTUFBTSxpQkFBaUIsR0FBRyxNQUFNLHlCQUF5QixDQUFDLFlBQVksQ0FDcEUsS0FBSyxFQUNMLFFBQVEsRUFDUixPQUFPLENBQ1IsQ0FBQztZQUNGLE9BQU8sOEJBQXFCLENBQUMsaUJBQWlCLEVBQUUsZUFBVyxFQUFFLGdCQUFTLEVBQUUsYUFBYSxDQUFDLENBQUM7UUFDekYsQ0FBQztRQUNEOzs7Ozs7V0FNRztRQUNILEtBQUssQ0FBQyxrQkFBa0IsQ0FDdEIsa0JBQXNDLEVBQ3RDLE9BQTRCO1lBSTVCLE1BQU0saUJBQWlCLEdBQUcsTUFBTSx5QkFBeUIsQ0FBQyxrQkFBa0IsQ0FDMUUsa0JBQWtCLEVBQ2xCLE9BQU8sQ0FDUixDQUFDO1lBQ0YsT0FBTyw4QkFBcUIsQ0FBQyxpQkFBaUIsRUFBRSxlQUFXLEVBQUUsZ0JBQVMsRUFBRSxhQUFhLENBQUMsQ0FBQztRQUN6RixDQUFDO1FBQ0Q7Ozs7OztXQU1HO1FBQ0gsS0FBSyxDQUFDLGtCQUFrQixDQUN0QixLQUFhLEVBQ2IsT0FBNEI7WUFFNUIsTUFBTSxpQkFBaUIsR0FBRyxNQUFNLHlCQUF5QixDQUFDLGtCQUFrQixDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztZQUM3RixPQUFPLDhCQUFxQixDQUFDLGlCQUFpQixFQUFFLGVBQVcsRUFBRSxnQkFBUyxFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBQ3pGLENBQUM7UUFDRDs7Ozs7V0FLRztRQUNILEtBQUssQ0FBQyxxQkFBcUIsQ0FDekIsT0FBNEI7WUFFNUIsTUFBTSxpQkFBaUIsR0FBRyxNQUFNLHlCQUF5QixDQUFDLHFCQUFxQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ3pGLE9BQU8sOEJBQXFCLENBQUMsaUJBQWlCLEVBQUUsZUFBVyxFQUFFLGdCQUFTLEVBQUUsYUFBYSxDQUFDLENBQUM7UUFDekYsQ0FBQztRQUNEOzs7Ozs7V0FNRztRQUNILEtBQUssQ0FBQyxlQUFlLENBQ25CLEtBQWEsRUFDYixPQUE0QjtZQUU1QixNQUFNLGlCQUFpQixHQUFHLE1BQU0seUJBQXlCLENBQUMsZUFBZSxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztZQUMxRixPQUFPLDhCQUFxQixDQUFDLGlCQUFpQixFQUFFLGVBQVcsRUFBRSxnQkFBUyxFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBQ3pGLENBQUM7UUFDRDs7Ozs7Ozs7O1dBU0c7UUFDSCxLQUFLLENBQUMsMkJBQTJCLENBQy9CLEtBQWEsRUFDYixZQUFpQyxFQUNqQyxXQUFvQixFQUNwQixZQUFxQixFQUNyQixPQUE0QjtZQUU1QixNQUFNLGlCQUFpQixHQUFHLE1BQU0seUJBQXlCLENBQUMsMkJBQTJCLENBQ25GLEtBQUssRUFDTCxZQUFZLEVBQ1osV0FBVyxFQUNYLFlBQVksRUFDWixPQUFPLENBQ1IsQ0FBQztZQUNGLE9BQU8sOEJBQXFCLENBQUMsaUJBQWlCLEVBQUUsZUFBVyxFQUFFLGdCQUFTLEVBQUUsYUFBYSxDQUFDLENBQUM7UUFDekYsQ0FBQztRQUNEOzs7Ozs7OztXQVFHO1FBQ0gsS0FBSyxDQUFDLHVCQUF1QixDQUMzQixLQUFhLEVBQ2IsSUFBYSxFQUNiLE9BQWdCLEVBQ2hCLE9BQTRCO1lBRTVCLE1BQU0saUJBQWlCLEdBQUcsTUFBTSx5QkFBeUIsQ0FBQyx1QkFBdUIsQ0FDL0UsS0FBSyxFQUNMLElBQUksRUFDSixPQUFPLEVBQ1AsT0FBTyxDQUNSLENBQUM7WUFDRixPQUFPLDhCQUFxQixDQUFDLGlCQUFpQixFQUFFLGVBQVcsRUFBRSxnQkFBUyxFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBQ3pGLENBQUM7UUFDRDs7Ozs7OztXQU9HO1FBQ0gsS0FBSyxDQUFDLGlCQUFpQixDQUNyQixJQUFhLEVBQ2IsT0FBZ0IsRUFDaEIsT0FBNEI7WUFJNUIsTUFBTSxpQkFBaUIsR0FBRyxNQUFNLHlCQUF5QixDQUFDLGlCQUFpQixDQUN6RSxJQUFJLEVBQ0osT0FBTyxFQUNQLE9BQU8sQ0FDUixDQUFDO1lBQ0YsT0FBTyw4QkFBcUIsQ0FBQyxpQkFBaUIsRUFBRSxlQUFXLEVBQUUsZ0JBQVMsRUFBRSxhQUFhLENBQUMsQ0FBQztRQUN6RixDQUFDO1FBQ0Q7Ozs7Ozs7V0FPRztRQUNILEtBQUssQ0FBQyxrQkFBa0IsQ0FDdEIsS0FBYSxFQUNiLGtCQUFzQyxFQUN0QyxPQUE0QjtZQUU1QixNQUFNLGlCQUFpQixHQUFHLE1BQU0seUJBQXlCLENBQUMsa0JBQWtCLENBQzFFLEtBQUssRUFDTCxrQkFBa0IsRUFDbEIsT0FBTyxDQUNSLENBQUM7WUFDRixPQUFPLDhCQUFxQixDQUFDLGlCQUFpQixFQUFFLGVBQVcsRUFBRSxnQkFBUyxFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBQ3pGLENBQUM7S0FDRixDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBRUY7OztHQUdHO0FBQ1UsUUFBQSx1QkFBdUIsR0FBRyxVQUNyQyxhQUE2QixFQUM3QixRQUFpQixFQUNqQixLQUFxQjtJQUVyQixNQUFNLFVBQVUsR0FBRywwQkFBa0IsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUNyRCxPQUFPO1FBQ0w7Ozs7Ozs7V0FPRztRQUNILFlBQVksQ0FBQyxLQUFhLEVBQUUsUUFBZ0IsRUFBRSxPQUFhO1lBQ3pELE9BQU8sVUFBVTtpQkFDZCxZQUFZLENBQUMsS0FBSyxFQUFFLFFBQVEsRUFBRSxPQUFPLENBQUM7aUJBQ3RDLElBQUksQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQ2pELENBQUM7UUFDRDs7Ozs7O1dBTUc7UUFDSCxrQkFBa0IsQ0FDaEIsa0JBQXNDLEVBQ3RDLE9BQWE7WUFFYixPQUFPLFVBQVU7aUJBQ2Qsa0JBQWtCLENBQUMsa0JBQWtCLEVBQUUsT0FBTyxDQUFDO2lCQUMvQyxJQUFJLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUNqRCxDQUFDO1FBQ0Q7Ozs7OztXQU1HO1FBQ0gsa0JBQWtCLENBQUMsS0FBYSxFQUFFLE9BQWE7WUFDN0MsT0FBTyxVQUFVO2lCQUNkLGtCQUFrQixDQUFDLEtBQUssRUFBRSxPQUFPLENBQUM7aUJBQ2xDLElBQUksQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQ2pELENBQUM7UUFDRDs7Ozs7V0FLRztRQUNILHFCQUFxQixDQUFDLE9BQWE7WUFDakMsT0FBTyxVQUFVLENBQUMscUJBQXFCLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDL0YsQ0FBQztRQUNEOzs7Ozs7V0FNRztRQUNILGVBQWUsQ0FBQyxLQUFhLEVBQUUsT0FBYTtZQUMxQyxPQUFPLFVBQVUsQ0FBQyxlQUFlLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQ2hHLENBQUM7UUFDRDs7Ozs7Ozs7O1dBU0c7UUFDSCwyQkFBMkIsQ0FDekIsS0FBYSxFQUNiLFlBQWlDLEVBQ2pDLFdBQW9CLEVBQ3BCLFlBQXFCLEVBQ3JCLE9BQWE7WUFFYixPQUFPLFVBQVU7aUJBQ2QsMkJBQTJCLENBQUMsS0FBSyxFQUFFLFlBQVksRUFBRSxXQUFXLEVBQUUsWUFBWSxFQUFFLE9BQU8sQ0FBQztpQkFDcEYsSUFBSSxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDakQsQ0FBQztRQUNEOzs7Ozs7OztXQVFHO1FBQ0gsdUJBQXVCLENBQ3JCLEtBQWEsRUFDYixJQUFhLEVBQ2IsT0FBZ0IsRUFDaEIsT0FBYTtZQUViLE9BQU8sVUFBVTtpQkFDZCx1QkFBdUIsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUM7aUJBQ3RELElBQUksQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQ2pELENBQUM7UUFDRDs7Ozs7OztXQU9HO1FBQ0gsaUJBQWlCLENBQ2YsSUFBYSxFQUNiLE9BQWdCLEVBQ2hCLE9BQWE7WUFFYixPQUFPLFVBQVU7aUJBQ2QsaUJBQWlCLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUM7aUJBQ3pDLElBQUksQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQ2pELENBQUM7UUFDRDs7Ozs7OztXQU9HO1FBQ0gsa0JBQWtCLENBQ2hCLEtBQWEsRUFDYixrQkFBc0MsRUFDdEMsT0FBYTtZQUViLE9BQU8sVUFBVTtpQkFDZCxrQkFBa0IsQ0FBQyxLQUFLLEVBQUUsa0JBQWtCLEVBQUUsT0FBTyxDQUFDO2lCQUN0RCxJQUFJLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUNqRCxDQUFDO0tBQ0YsQ0FBQztBQUNKLENBQUMsQ0FBQztBQTBLRjs7Ozs7R0FLRztBQUNILE1BQWEsZ0JBQWlCLFNBQVEsY0FBTztJQUMzQzs7Ozs7OztPQU9HO0lBQ0ksWUFBWSxDQUNqQixpQkFBc0QsRUFDdEQsT0FBNEI7UUFFNUIsT0FBTywwQkFBa0IsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDO2FBQzFDLFlBQVksQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLEVBQUUsaUJBQWlCLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQzthQUMxRSxJQUFJLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQzNELENBQUM7SUFFRDs7Ozs7OztPQU9HO0lBQ0ksa0JBQWtCLENBQ3ZCLGlCQUE0RCxFQUM1RCxPQUE0QjtRQUU1QixPQUFPLDBCQUFrQixDQUFDLElBQUksQ0FBQyxhQUFhLENBQUM7YUFDMUMsa0JBQWtCLENBQUMsaUJBQWlCLENBQUMsa0JBQWtCLEVBQUUsT0FBTyxDQUFDO2FBQ2pFLElBQUksQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDM0QsQ0FBQztJQUVEOzs7Ozs7O09BT0c7SUFDSSxrQkFBa0IsQ0FDdkIsaUJBQTRELEVBQzVELE9BQTRCO1FBRTVCLE9BQU8sMEJBQWtCLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQzthQUMxQyxrQkFBa0IsQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDO2FBQ3BELElBQUksQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDM0QsQ0FBQztJQUVEOzs7Ozs7T0FNRztJQUNJLHFCQUFxQixDQUFDLE9BQTRCO1FBQ3ZELE9BQU8sMEJBQWtCLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQzthQUMxQyxxQkFBcUIsQ0FBQyxPQUFPLENBQUM7YUFDOUIsSUFBSSxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUMzRCxDQUFDO0lBRUQ7Ozs7Ozs7T0FPRztJQUNJLGVBQWUsQ0FDcEIsaUJBQXlELEVBQ3pELE9BQTRCO1FBRTVCLE9BQU8sMEJBQWtCLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQzthQUMxQyxlQUFlLENBQUMsaUJBQWlCLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQzthQUNqRCxJQUFJLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQzNELENBQUM7SUFFRDs7Ozs7OztPQU9HO0lBQ0ksMkJBQTJCLENBQ2hDLGlCQUFxRSxFQUNyRSxPQUE0QjtRQUU1QixPQUFPLDBCQUFrQixDQUFDLElBQUksQ0FBQyxhQUFhLENBQUM7YUFDMUMsMkJBQTJCLENBQzFCLGlCQUFpQixDQUFDLEtBQUssRUFDdkIsaUJBQWlCLENBQUMsWUFBWSxFQUM5QixpQkFBaUIsQ0FBQyxXQUFXLEVBQzdCLGlCQUFpQixDQUFDLFlBQVksRUFDOUIsT0FBTyxDQUNSO2FBQ0EsSUFBSSxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUMzRCxDQUFDO0lBRUQ7Ozs7Ozs7T0FPRztJQUNJLHVCQUF1QixDQUM1QixpQkFBaUUsRUFDakUsT0FBNEI7UUFFNUIsT0FBTywwQkFBa0IsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDO2FBQzFDLHVCQUF1QixDQUN0QixpQkFBaUIsQ0FBQyxLQUFLLEVBQ3ZCLGlCQUFpQixDQUFDLElBQUksRUFDdEIsaUJBQWlCLENBQUMsT0FBTyxFQUN6QixPQUFPLENBQ1I7YUFDQSxJQUFJLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQzNELENBQUM7SUFFRDs7Ozs7OztPQU9HO0lBQ0ksaUJBQWlCLENBQ3RCLG9CQUE4RCxFQUFFLEVBQ2hFLE9BQTRCO1FBRTVCLE9BQU8sMEJBQWtCLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQzthQUMxQyxpQkFBaUIsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLEVBQUUsaUJBQWlCLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQzthQUM3RSxJQUFJLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQzNELENBQUM7SUFFRDs7Ozs7OztPQU9HO0lBQ0ksa0JBQWtCLENBQ3ZCLGlCQUE0RCxFQUM1RCxPQUE0QjtRQUU1QixPQUFPLDBCQUFrQixDQUFDLElBQUksQ0FBQyxhQUFhLENBQUM7YUFDMUMsa0JBQWtCLENBQUMsaUJBQWlCLENBQUMsS0FBSyxFQUFFLGlCQUFpQixDQUFDLGtCQUFrQixFQUFFLE9BQU8sQ0FBQzthQUMxRixJQUFJLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQzNELENBQUM7Q0FDRjtBQWhLRCw0Q0FnS0MifQ==