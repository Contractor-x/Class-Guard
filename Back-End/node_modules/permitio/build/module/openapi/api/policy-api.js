/* tslint:disable */
/* eslint-disable */
/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, setSearchParams, toPathString, createRequestFunction, } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI } from '../base';
/**
 * PolicyApi - axios parameter creator
 * @export
 */
export const PolicyApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Get Opal Data Sources
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpalDataSources: async (options = {}) => {
            const localVarPath = `/v2/opal/data/config`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get Opal Data Sources
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpalDataSourcesOpalDataConfigGet: async (options = {}) => {
            const localVarPath = `/opal/data/config`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * PolicyApi - functional programming interface
 * @export
 */
export const PolicyApiFp = function (configuration) {
    const localVarAxiosParamCreator = PolicyApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Get Opal Data Sources
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOpalDataSources(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOpalDataSources(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Get Opal Data Sources
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOpalDataSourcesOpalDataConfigGet(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOpalDataSourcesOpalDataConfigGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};
/**
 * PolicyApi - factory interface
 * @export
 */
export const PolicyApiFactory = function (configuration, basePath, axios) {
    const localVarFp = PolicyApiFp(configuration);
    return {
        /**
         *
         * @summary Get Opal Data Sources
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpalDataSources(options) {
            return localVarFp.getOpalDataSources(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get Opal Data Sources
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpalDataSourcesOpalDataConfigGet(options) {
            return localVarFp
                .getOpalDataSourcesOpalDataConfigGet(options)
                .then((request) => request(axios, basePath));
        },
    };
};
/**
 * PolicyApi - object-oriented interface
 * @export
 * @class PolicyApi
 * @extends {BaseAPI}
 */
export class PolicyApi extends BaseAPI {
    /**
     *
     * @summary Get Opal Data Sources
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApi
     */
    getOpalDataSources(options) {
        return PolicyApiFp(this.configuration)
            .getOpalDataSources(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get Opal Data Sources
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApi
     */
    getOpalDataSourcesOpalDataConfigGet(options) {
        return PolicyApiFp(this.configuration)
            .getOpalDataSourcesOpalDataConfigGet(options)
            .then((request) => request(this.axios, this.basePath));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9saWN5LWFwaS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9vcGVuYXBpL2FwaS9wb2xpY3ktYXBpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQixvQkFBb0I7QUFDcEI7Ozs7Ozs7Ozs7R0FVRztBQUVILE9BQU8sV0FBZ0UsTUFBTSxPQUFPLENBQUM7QUFFckYseURBQXlEO0FBQ3pELGFBQWE7QUFDYixPQUFPLEVBQ0wsY0FBYyxFQU1kLGVBQWUsRUFFZixZQUFZLEVBQ1oscUJBQXFCLEdBQ3RCLE1BQU0sV0FBVyxDQUFDO0FBQ25CLGFBQWE7QUFDYixPQUFPLEVBQUUsU0FBUyxFQUFtQyxPQUFPLEVBQWlCLE1BQU0sU0FBUyxDQUFDO0FBRzdGOzs7R0FHRztBQUNILE1BQU0sQ0FBQyxNQUFNLDBCQUEwQixHQUFHLFVBQVUsYUFBNkI7SUFDL0UsT0FBTztRQUNMOzs7OztXQUtHO1FBQ0gsa0JBQWtCLEVBQUUsS0FBSyxFQUFFLFVBQThCLEVBQUUsRUFBd0IsRUFBRTtZQUNuRixNQUFNLFlBQVksR0FBRyxzQkFBc0IsQ0FBQztZQUM1QyxvRkFBb0Y7WUFDcEYsTUFBTSxjQUFjLEdBQUcsSUFBSSxHQUFHLENBQUMsWUFBWSxFQUFFLGNBQWMsQ0FBQyxDQUFDO1lBQzdELElBQUksV0FBVyxDQUFDO1lBQ2hCLElBQUksYUFBYSxFQUFFO2dCQUNqQixXQUFXLEdBQUcsYUFBYSxDQUFDLFdBQVcsQ0FBQzthQUN6QztZQUVELE1BQU0sc0JBQXNCLEdBQUcsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLEdBQUcsV0FBVyxFQUFFLEdBQUcsT0FBTyxFQUFFLENBQUM7WUFDN0UsTUFBTSx1QkFBdUIsR0FBRyxFQUFTLENBQUM7WUFDMUMsTUFBTSxzQkFBc0IsR0FBRyxFQUFTLENBQUM7WUFFekMsZUFBZSxDQUFDLGNBQWMsRUFBRSxzQkFBc0IsQ0FBQyxDQUFDO1lBQ3hELElBQUksc0JBQXNCLEdB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