"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.APIKeysApi = exports.APIKeysApiFactory = exports.APIKeysApiFp = exports.APIKeysApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * APIKeysApi - axios parameter creator
 * @export
 */
exports.APIKeysApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Creates a new api_key under the active organization.
         * @summary Create Api Key
         * @param {APIKeyCreate} aPIKeyCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApiKey: async (aPIKeyCreate, options = {}) => {
            // verify required parameter 'aPIKeyCreate' is not null or undefined
            common_1.assertParamExists('createApiKey', 'aPIKeyCreate', aPIKeyCreate);
            const localVarPath = `/v2/api-key`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(aPIKeyCreate, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes the api_key and all its related data.
         * @summary Delete Api Key
         * @param {string} apiKeyId The unique id of the API key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiKey: async (apiKeyId, options = {}) => {
            // verify required parameter 'apiKeyId' is not null or undefined
            common_1.assertParamExists('deleteApiKey', 'apiKeyId', apiKeyId);
            const localVarPath = `/v2/api-key/{api_key_id}`.replace(`{${'api_key_id'}}`, encodeURIComponent(String(apiKeyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a single api_key matching the given api_key_id, if such api_key exists.
         * @summary Get Api Key
         * @param {string} apiKeyId The unique id of the API key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiKey: async (apiKeyId, options = {}) => {
            // verify required parameter 'apiKeyId' is not null or undefined
            common_1.assertParamExists('getApiKey', 'apiKeyId', apiKeyId);
            const localVarPath = `/v2/api-key/{api_key_id}`.replace(`{${'api_key_id'}}`, encodeURIComponent(String(apiKeyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get Api Key Scope
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiKeyScope: async (options = {}) => {
            const localVarPath = `/v2/api-key/scope`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get Environment Api Key
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnvironmentApiKey: async (projId, envId, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            common_1.assertParamExists('getEnvironmentApiKey', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            common_1.assertParamExists('getEnvironmentApiKey', 'envId', envId);
            const localVarPath = `/v2/api-key/{proj_id}/{env_id}`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists all the api_keys under the active organization.
         * @summary List Api Keys
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApiKeys: async (page, perPage, options = {}) => {
            const localVarPath = `/v2/api-key`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * APIKeysApi - functional programming interface
 * @export
 */
exports.APIKeysApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.APIKeysApiAxiosParamCreator(configuration);
    return {
        /**
         * Creates a new api_key under the active organization.
         * @summary Create Api Key
         * @param {APIKeyCreate} aPIKeyCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createApiKey(aPIKeyCreate, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createApiKey(aPIKeyCreate, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Deletes the api_key and all its related data.
         * @summary Delete Api Key
         * @param {string} apiKeyId The unique id of the API key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteApiKey(apiKeyId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteApiKey(apiKeyId, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Gets a single api_key matching the given api_key_id, if such api_key exists.
         * @summary Get Api Key
         * @param {string} apiKeyId The unique id of the API key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiKey(apiKeyId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiKey(apiKeyId, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Get Api Key Scope
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiKeyScope(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiKeyScope(options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Get Environment Api Key
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEnvironmentApiKey(projId, envId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEnvironmentApiKey(projId, envId, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Lists all the api_keys under the active organization.
         * @summary List Api Keys
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listApiKeys(page, perPage, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listApiKeys(page, perPage, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
    };
};
/**
 * APIKeysApi - factory interface
 * @export
 */
exports.APIKeysApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.APIKeysApiFp(configuration);
    return {
        /**
         * Creates a new api_key under the active organization.
         * @summary Create Api Key
         * @param {APIKeyCreate} aPIKeyCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApiKey(aPIKeyCreate, options) {
            return localVarFp
                .createApiKey(aPIKeyCreate, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Deletes the api_key and all its related data.
         * @summary Delete Api Key
         * @param {string} apiKeyId The unique id of the API key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiKey(apiKeyId, options) {
            return localVarFp.deleteApiKey(apiKeyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets a single api_key matching the given api_key_id, if such api_key exists.
         * @summary Get Api Key
         * @param {string} apiKeyId The unique id of the API key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiKey(apiKeyId, options) {
            return localVarFp.getApiKey(apiKeyId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get Api Key Scope
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiKeyScope(options) {
            return localVarFp.getApiKeyScope(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get Environment Api Key
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnvironmentApiKey(projId, envId, options) {
            return localVarFp
                .getEnvironmentApiKey(projId, envId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Lists all the api_keys under the active organization.
         * @summary List Api Keys
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApiKeys(page, perPage, options) {
            return localVarFp
                .listApiKeys(page, perPage, options)
                .then((request) => request(axios, basePath));
        },
    };
};
/**
 * APIKeysApi - object-oriented interface
 * @export
 * @class APIKeysApi
 * @extends {BaseAPI}
 */
class APIKeysApi extends base_1.BaseAPI {
    /**
     * Creates a new api_key under the active organization.
     * @summary Create Api Key
     * @param {APIKeysApiCreateApiKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIKeysApi
     */
    createApiKey(requestParameters, options) {
        return exports.APIKeysApiFp(this.configuration)
            .createApiKey(requestParameters.aPIKeyCreate, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes the api_key and all its related data.
     * @summary Delete Api Key
     * @param {APIKeysApiDeleteApiKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIKeysApi
     */
    deleteApiKey(requestParameters, options) {
        return exports.APIKeysApiFp(this.configuration)
            .deleteApiKey(requestParameters.apiKeyId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gets a single api_key matching the given api_key_id, if such api_key exists.
     * @summary Get Api Key
     * @param {APIKeysApiGetApiKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIKeysApi
     */
    getApiKey(requestParameters, options) {
        return exports.APIKeysApiFp(this.configuration)
            .getApiKey(requestParameters.apiKeyId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get Api Key Scope
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIKeysApi
     */
    getApiKeyScope(options) {
        return exports.APIKeysApiFp(this.configuration)
            .getApiKeyScope(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get Environment Api Key
     * @param {APIKeysApiGetEnvironmentApiKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIKeysApi
     */
    getEnvironmentApiKey(requestParameters, options) {
        return exports.APIKeysApiFp(this.configuration)
            .getEnvironmentApiKey(requestParameters.projId, requestParameters.envId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists all the api_keys under the active organization.
     * @summary List Api Keys
     * @param {APIKeysApiListApiKeysRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIKeysApi
     */
    listApiKeys(requestParameters = {}, options) {
        return exports.APIKeysApiFp(this.configuration)
            .listApiKeys(requestParameters.page, requestParameters.perPage, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.APIKeysApi = APIKeysApi;
//# sourceMappingURL=data:application/json;base64,