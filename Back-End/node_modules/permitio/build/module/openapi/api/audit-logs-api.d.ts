/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { PaginatedResultAuditLog } from '../types';
/**
 * AuditLogsApi - axios parameter creator
 * @export
 */
export declare const AuditLogsApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary List Audit Logs
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} [pdpId] Filter by pdp config id
     * @param {Array<string>} [users] List of user keys or emails to filter by
     * @param {boolean} [decision] Filter by decision result
     * @param {Array<string>} [resources] Filter by resources
     * @param {string} [tenant] Filter by tenant
     * @param {string} [action] Filter by action
     * @param {number} [timestampFrom] Filter by timestamp from
     * @param {number} [timestampTo] Filter by timestamp to
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAuditLogs: (projId: string, envId: string, pdpId?: string | undefined, users?: string[] | undefined, decision?: boolean | undefined, resources?: string[] | undefined, tenant?: string | undefined, action?: string | undefined, timestampFrom?: number | undefined, timestampTo?: number | undefined, page?: number | undefined, perPage?: number | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AuditLogsApi - functional programming interface
 * @export
 */
export declare const AuditLogsApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary List Audit Logs
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} [pdpId] Filter by pdp config id
     * @param {Array<string>} [users] List of user keys or emails to filter by
     * @param {boolean} [decision] Filter by decision result
     * @param {Array<string>} [resources] Filter by resources
     * @param {string} [tenant] Filter by tenant
     * @param {string} [action] Filter by action
     * @param {number} [timestampFrom] Filter by timestamp from
     * @param {number} [timestampTo] Filter by timestamp to
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAuditLogs(projId: string, envId: string, pdpId?: string | undefined, users?: string[] | undefined, decision?: boolean | undefined, resources?: string[] | undefined, tenant?: string | undefined, action?: string | undefined, timestampFrom?: number | undefined, timestampTo?: number | undefined, page?: number | undefined, perPage?: number | undefined, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<PaginatedResultAuditLog>>;
};
/**
 * AuditLogsApi - factory interface
 * @export
 */
export declare const AuditLogsApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     *
     * @summary List Audit Logs
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} [pdpId] Filter by pdp config id
     * @param {Array<string>} [users] List of user keys or emails to filter by
     * @param {boolean} [decision] Filter by decision result
     * @param {Array<string>} [resources] Filter by resources
     * @param {string} [tenant] Filter by tenant
     * @param {string} [action] Filter by action
     * @param {number} [timestampFrom] Filter by timestamp from
     * @param {number} [timestampTo] Filter by timestamp to
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAuditLogs(projId: string, envId: string, pdpId?: string | undefined, users?: string[] | undefined, decision?: boolean | undefined, resources?: string[] | undefined, tenant?: string | undefined, action?: string | undefined, timestampFrom?: number | undefined, timestampTo?: number | undefined, page?: number | undefined, perPage?: number | undefined, options?: any): AxiosPromise<PaginatedResultAuditLog>;
};
/**
 * Request parameters for listAuditLogs operation in AuditLogsApi.
 * @export
 * @interface AuditLogsApiListAuditLogsRequest
 */
export interface AuditLogsApiListAuditLogsRequest {
    /**
     * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof AuditLogsApiListAuditLogs
     */
    readonly projId: string;
    /**
     * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof AuditLogsApiListAuditLogs
     */
    readonly envId: string;
    /**
     * Filter by pdp config id
     * @type {string}
     * @memberof AuditLogsApiListAuditLogs
     */
    readonly pdpId?: string;
    /**
     * List of user keys or emails to filter by
     * @type {Array<string>}
     * @memberof AuditLogsApiListAuditLogs
     */
    readonly users?: Array<string>;
    /**
     * Filter by decision result
     * @type {boolean}
     * @memberof AuditLogsApiListAuditLogs
     */
    readonly decision?: boolean;
    /**
     * Filter by resources
     * @type {Array<string>}
     * @memberof AuditLogsApiListAuditLogs
     */
    readonly resources?: Array<string>;
    /**
     * Filter by tenant
     * @type {string}
     * @memberof AuditLogsApiListAuditLogs
     */
    readonly tenant?: string;
    /**
     * Filter by action
     * @type {string}
     * @memberof AuditLogsApiListAuditLogs
     */
    readonly action?: string;
    /**
     * Filter by timestamp from
     * @type {number}
     * @memberof AuditLogsApiListAuditLogs
     */
    readonly timestampFrom?: number;
    /**
     * Filter by timestamp to
     * @type {number}
     * @memberof AuditLogsApiListAuditLogs
     */
    readonly timestampTo?: number;
    /**
     * Page number of the results to fetch, starting at 1.
     * @type {number}
     * @memberof AuditLogsApiListAuditLogs
     */
    readonly page?: number;
    /**
     * The number of results per page (max 100).
     * @type {number}
     * @memberof AuditLogsApiListAuditLogs
     */
    readonly perPage?: number;
}
/**
 * AuditLogsApi - object-oriented interface
 * @export
 * @class AuditLogsApi
 * @extends {BaseAPI}
 */
export declare class AuditLogsApi extends BaseAPI {
    /**
     *
     * @summary List Audit Logs
     * @param {AuditLogsApiListAuditLogsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditLogsApi
     */
    listAuditLogs(requestParameters: AuditLogsApiListAuditLogsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PaginatedResultAuditLog>>;
}
