/* tslint:disable */
/* eslint-disable */
/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI } from '../base';
/**
 * RoleAssignmentsApi - axios parameter creator
 * @export
 */
export const RoleAssignmentsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Assigns a role to a user within a tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.
         * @summary Assign Role
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {RoleAssignmentCreate} roleAssignmentCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignRole: async (projId, envId, roleAssignmentCreate, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('assignRole', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('assignRole', 'envId', envId);
            // verify required parameter 'roleAssignmentCreate' is not null or undefined
            assertParamExists('assignRole', 'roleAssignmentCreate', roleAssignmentCreate);
            const localVarPath = `/v2/facts/{proj_id}/{env_id}/role_assignments`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(roleAssignmentCreate, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists the role assignments defined within an environment.  - If the `user` filter is present, will only return the role assignments of that user. - If the `tenant` filter is present, will only return the role assignments in that tenant. - If the `role` filter is present, will only return role assignments that are granting that role.
         * @summary List Role Assignments
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} [user] optional user filter, will only return role assignments granted to this user.
         * @param {string} [role] optional role filter, will only return role assignments granting this role.
         * @param {string} [tenant] optional tenant filter, will only return role assignments granted in that tenant.
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRoleAssignments: async (projId, envId, user, role, tenant, page, perPage, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('listRoleAssignments', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('listRoleAssignments', 'envId', envId);
            const localVarPath = `/v2/facts/{proj_id}/{env_id}/role_assignments`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (user !== undefined) {
                localVarQueryParameter['user'] = user;
            }
            if (role !== undefined) {
                localVarQueryParameter['role'] = role;
            }
            if (tenant !== undefined) {
                localVarQueryParameter['tenant'] = tenant;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Unassigns a user role within a tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.  If the role is not actually assigned, will return 404.
         * @summary Unassign Role
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {RoleAssignmentRemove} roleAssignmentRemove
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unassignRole: async (projId, envId, roleAssignmentRemove, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('unassignRole', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('unassignRole', 'envId', envId);
            // verify required parameter 'roleAssignmentRemove' is not null or undefined
            assertParamExists('unassignRole', 'roleAssignmentRemove', roleAssignmentRemove);
            const localVarPath = `/v2/facts/{proj_id}/{env_id}/role_assignments`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(roleAssignmentRemove, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * RoleAssignmentsApi - functional programming interface
 * @export
 */
export const RoleAssignmentsApiFp = function (configuration) {
    const localVarAxiosParamCreator = RoleAssignmentsApiAxiosParamCreator(configuration);
    return {
        /**
         * Assigns a role to a user within a tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.
         * @summary Assign Role
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {RoleAssignmentCreate} roleAssignmentCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignRole(projId, envId, roleAssignmentCreate, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assignRole(projId, envId, roleAssignmentCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists the role assignments defined within an environment.  - If the `user` filter is present, will only return the role assignments of that user. - If the `tenant` filter is present, will only return the role assignments in that tenant. - If the `role` filter is present, will only return role assignments that are granting that role.
         * @summary List Role Assignments
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} [user] optional user filter, will only return role assignments granted to this user.
         * @param {string} [role] optional role filter, will only return role assignments granting this role.
         * @param {string} [tenant] optional tenant filter, will only return role assignments granted in that tenant.
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listRoleAssignments(projId, envId, user, role, tenant, page, perPage, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listRoleAssignments(projId, envId, user, role, tenant, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Unassigns a user role within a tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.  If the role is not actually assigned, will return 404.
         * @summary Unassign Role
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {RoleAssignmentRemove} roleAssignmentRemove
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unassignRole(projId, envId, roleAssignmentRemove, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unassignRole(projId, envId, roleAssignmentRemove, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};
/**
 * RoleAssignmentsApi - factory interface
 * @export
 */
export const RoleAssignmentsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = RoleAssignmentsApiFp(configuration);
    return {
        /**
         * Assigns a role to a user within a tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.
         * @summary Assign Role
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {RoleAssignmentCreate} roleAssignmentCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignRole(projId, envId, roleAssignmentCreate, options) {
            return localVarFp
                .assignRole(projId, envId, roleAssignmentCreate, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Lists the role assignments defined within an environment.  - If the `user` filter is present, will only return the role assignments of that user. - If the `tenant` filter is present, will only return the role assignments in that tenant. - If the `role` filter is present, will only return role assignments that are granting that role.
         * @summary List Role Assignments
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} [user] optional user filter, will only return role assignments granted to this user.
         * @param {string} [role] optional role filter, will only return role assignments granting this role.
         * @param {string} [tenant] optional tenant filter, will only return role assignments granted in that tenant.
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRoleAssignments(projId, envId, user, role, tenant, page, perPage, options) {
            return localVarFp
                .listRoleAssignments(projId, envId, user, role, tenant, page, perPage, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Unassigns a user role within a tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.  If the role is not actually assigned, will return 404.
         * @summary Unassign Role
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {RoleAssignmentRemove} roleAssignmentRemove
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unassignRole(projId, envId, roleAssignmentRemove, options) {
            return localVarFp
                .unassignRole(projId, envId, roleAssignmentRemove, options)
                .then((request) => request(axios, basePath));
        },
    };
};
/**
 * RoleAssignmentsApi - object-oriented interface
 * @export
 * @class RoleAssignmentsApi
 * @extends {BaseAPI}
 */
export class RoleAssignmentsApi extends BaseAPI {
    /**
     * Assigns a role to a user within a tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.
     * @summary Assign Role
     * @param {RoleAssignmentsApiAssignRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleAssignmentsApi
     */
    assignRole(requestParameters, options) {
        return RoleAssignmentsApiFp(this.configuration)
            .assignRole(requestParameters.projId, requestParameters.envId, requestParameters.roleAssignmentCreate, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists the role assignments defined within an environment.  - If the `user` filter is present, will only return the role assignments of that user. - If the `tenant` filter is present, will only return the role assignments in that tenant. - If the `role` filter is present, will only return role assignments that are granting that role.
     * @summary List Role Assignments
     * @param {RoleAssignmentsApiListRoleAssignmentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleAssignmentsApi
     */
    listRoleAssignments(requestParameters, options) {
        return RoleAssignmentsApiFp(this.configuration)
            .listRoleAssignments(requestParameters.projId, requestParameters.envId, requestParameters.user, requestParameters.role, requestParameters.tenant, requestParameters.page, requestParameters.perPage, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Unassigns a user role within a tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.  If the role is not actually assigned, will return 404.
     * @summary Unassign Role
     * @param {RoleAssignmentsApiUnassignRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleAssignmentsApi
     */
    unassignRole(requestParameters, options) {
        return RoleAssignmentsApiFp(this.configuration)
            .unassignRole(requestParameters.projId, requestParameters.envId, requestParameters.roleAssignmentRemove, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
//# sourceMappingURL=data:application/json;base64,