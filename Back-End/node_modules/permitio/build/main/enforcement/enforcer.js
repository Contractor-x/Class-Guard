"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Enforcer = exports.PermitPDPStatusError = exports.PermitConnectionError = exports.PermitError = void 0;
const axios_1 = __importDefault(require("axios"));
const context_1 = require("../utils/context");
const RESOURCE_DELIMITER = ':';
function isString(x) {
    return typeof x === 'string';
}
class PermitError extends Error {
    constructor(message) {
        super(message);
        this.name = 'PermitError';
    }
}
exports.PermitError = PermitError;
class PermitConnectionError extends PermitError {
    constructor(message) {
        super(message);
        this.name = 'PermitConnectionError';
    }
}
exports.PermitConnectionError = PermitConnectionError;
class PermitPDPStatusError extends PermitError {
    constructor(message) {
        super(message);
        this.name = 'PermitPDPStatusError';
    }
}
exports.PermitPDPStatusError = PermitPDPStatusError;
/**
 * this client is dealing with evaluation of check() queries.
 */
class Enforcer {
    constructor(config, logger) {
        this.config = config;
        this.logger = logger;
        this.client = axios_1.default.create({
            baseURL: `${this.config.pdp}/`,
        });
        this.logger = logger;
        this.contextStore = new context_1.ContextStore();
    }
    /**
     * Usage:
     *
     * // with (resource, action):
     * const user = { key: 'UNIQUE_USER_ID' };
     * permit.check(user, 'get', {'type': 'task', 'key': '23'})
     * permit.check(user, 'get', {'type': 'task'})
     *
     * // with (url, method):
     * const { resource, action } = permit.getUrlContext('/lists/3/todos/37', 'GET');
     * permit.check(user, action, resource)
     *
     * @param user
     * @param action
     * @param resource
     * @param context
     * @param config
     *
     * @returns whether or not action is permitted for given user
     */
    async check(user, action, resource, context = {}, // context provided specifically for this query
    config = {}) {
        return await this.checkWithExceptions(user, action, resource, context, config).catch((err) => {
            const shouldThrow = config.throwOnError === undefined ? this.config.throwOnError : config.throwOnError;
            if (shouldThrow) {
                throw err;
            }
            else {
                this.logger.error(err);
                return false;
            }
        });
    }
    async checkWithExceptions(user, action, resource, context = {}, // context provided specifically for this query
    config = {}) {
        const normalizedUser = isString(user) ? { key: user } : user;
        const checkTimeout = config.timeout || this.config.timeout;
        const resourceObj = isString(resource) ? Enforcer.resourceFromString(resource) : resource;
        const normalizedResource = this.normalizeResource(resourceObj);
        const queryContext = this.contextStore.getDerivedContext(context);
        const input = {
            user: normalizedUser,
            action: action,
            resource: normalizedResource,
            context: queryContext,
        };
        return await this.client
            .post('allowed', input, {
            headers: {
                Authorization: `Bearer ${this.config.token}`,
            },
            timeout: checkTimeout,
        })
            .then((response) => {
            if (response.status !== 200) {
                throw new PermitPDPStatusError(`Permit.check() got an unexpected status code: ${response.status}, please check your SDK init and make sure the PDP sidecar is configured correctly. \n\
            Read more about setting up the PDP at https://docs.permit.io`);
            }
            const decision = ('allow' in response.data ? response.data.allow : response.data.result.allow) || false;
            this.logger.info(`permit.check(${Enforcer.userRepr(normalizedUser)}, ${action}, ${Enforcer.resourceRepr(resourceObj)}) = ${decision}`);
            return decision;
        })
            .catch((error) => {
            var _a, _b;
            const errorMessage = `Error in permit.check(${Enforcer.userRepr(normalizedUser)}, ${action}, ${Enforcer.resourceRepr(resourceObj)})`;
            if (axios_1.default.isAxiosError(error)) {
                const errorStatusCode = ((_a = error.response) === null || _a === void 0 ? void 0 : _a.status.toString()) || '';
                const errorDetails = ((_b = error === null || error === void 0 ? void 0 : error.response) === null || _b === void 0 ? void 0 : _b.data) ? JSON.stringify(error.response.data)
                    : error.message;
                this.logger.error(`[${errorStatusCode}] ${errorMessage}, err: ${errorDetails}`);
            }
            else {
                this.logger.error(`${errorMessage}\n${error}`);
            }
            throw new PermitConnectionError(`Permit SDK got error: \n ${error.message} \n
          and cannot connect to the PDP, please check your configuration and make sure the PDP is running at ${this.config.pdp} and accepting requests. \n
          Read more about setting up the PDP at https://docs.permit.io`);
        });
    }
    // TODO: remove this eventually, once we decide on finalized structure of AuthzQuery
    normalizeResource(resource) {
        const normalizedResource = Object.assign({}, resource);
        // if tenant is empty, we might auto-set the default tenant according to config
        if (!normalizedResource.tenant && this.config.multiTenancy.useDefaultTenantIfEmpty) {
            normalizedResource.tenant = this.config.multiTenancy.defaultTenant;
        }
        return normalizedResource;
    }
    static userRepr(user) {
        if (user.attributes || user.email) {
            return JSON.stringify(user);
        }
        return user.key;
    }
    static resourceRepr(resource) {
        var _a;
        if (resource.attributes && resource.attributes.length > 0) {
            return JSON.stringify(resource);
        }
        let resourceRepr = '';
        if (resource.tenant) {
            resourceRepr += `${resource.tenant}/`;
        }
        resourceRepr += `${resource.type}:${(_a = resource.key) !== null && _a !== void 0 ? _a : '*'}`;
        return resourceRepr;
    }
    static resourceFromString(resource) {
        const parts = resource.split(RESOURCE_DELIMITER);
        if (parts.length < 1 || parts.length > 2) {
            throw Error(`permit.check() got invalid resource string: '${resource}'`);
        }
        return {
            type: parts[0],
            key: parts.length > 1 ? parts[1] : undefined,
        };
    }
    getMethods() {
        return {
            check: this.check.bind(this),
        };
    }
}
exports.Enforcer = Enforcer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW5mb3JjZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZW5mb3JjZW1lbnQvZW5mb3JjZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsa0RBQTZDO0FBSTdDLDhDQUFzRTtBQUl0RSxNQUFNLGtCQUFrQixHQUFHLEdBQUcsQ0FBQztBQUUvQixTQUFTLFFBQVEsQ0FBQyxDQUFNO0lBQ3RCLE9BQU8sT0FBTyxDQUFDLEtBQUssUUFBUSxDQUFDO0FBQy9CLENBQUM7QUFFRCxNQUFhLFdBQVksU0FBUSxLQUFLO0lBQ3BDLFlBQVksT0FBZTtRQUN6QixLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDZixJQUFJLENBQUMsSUFBSSxHQUFHLGFBQWEsQ0FBQztJQUM1QixDQUFDO0NBQ0Y7QUFMRCxrQ0FLQztBQUNELE1BQWEscUJBQXNCLFNBQVEsV0FBVztJQUNwRCxZQUFZLE9BQWU7UUFDekIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2YsSUFBSSxDQUFDLElBQUksR0FBRyx1QkFBdUIsQ0FBQztJQUN0QyxDQUFDO0NBQ0Y7QUFMRCxzREFLQztBQUNELE1BQWEsb0JBQXFCLFNBQVEsV0FBVztJQUNuRCxZQUFZLE9BQWU7UUFDekIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2YsSUFBSSxDQUFDLElBQUksR0FBRyxzQkFBc0IsQ0FBQztJQUNyQyxDQUFDO0NBQ0Y7QUFMRCxvREFLQztBQVlEOztHQUVHO0FBQ0gsTUFBYSxRQUFRO0lBSW5CLFlBQW9CLE1BQXFCLEVBQVUsTUFBYztRQUE3QyxXQUFNLEdBQU4sTUFBTSxDQUFlO1FBQVUsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUMvRCxJQUFJLENBQUMsTUFBTSxHQUFHLGVBQUssQ0FBQyxNQUFNLENBQUM7WUFDekIsT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEdBQUc7U0FDL0IsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxD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